#!/bin/bash

conda_setup () {
	export PATH="/opt/miniconda3/bin:$PATH"
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
		eval "$__conda_setup"
	else
		if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
			. "/opt/miniconda3/etc/profile.d/conda.sh"
		else
			export PATH="/opt/miniconda3/bin:$PATH"
		fi
	fi
	unset __conda_setup
	# <<< conda initialize <<<
}

if type swiperd > /dev/null; then
    cd () {
        builtin cd $@ && swiperd -a
    }
    sd () {
        builtin cd "$(swiperd)" && swiperd -a
    }
fi

ssh-delete-host () {
    if [ -z $1 ]; then
        echo "give a line to delete"
    else
        sed -i "${1}d" ~/.ssh/known_hosts
    fi
}


gitsr () { # Git Squash then Rebase on BRANCH
    # Squash merge, then rebase onto the desired branch (typically develop or master).
    local BRANCH=$1
    # Find the last common commit from the current HEAD and BRANCH.
    # Then soft reset to that point (to keep all changes staged).
    # Commit all changes as one atomic commit (i.e. squash merge).
    # Then rebase the updated HEAD onto BRANCH.
    git reset --soft $(git merge-base HEAD $BRANCH) && git commit && git rebase $BRANCH
}
