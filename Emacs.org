#+TITLE:Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Table of Contents :TOC:
- [[#package-manager][Package Manager]]
  - [[#startup-time][Startup Time]]
  - [[#breakdown][Breakdown]]
- [[#editing-utilities][Editing Utilities]]
  - [[#meow---modal-editing][Meow - Modal Editing]]
  - [[#file-handler-functions][File Handler Functions]]
  - [[#mark-without-activate][Mark without Activate]]
  - [[#xterm-integration-in-terminals-mouse][Xterm Integration In Terminals (Mouse)]]
  - [[#move--duplicating-lines][Move & Duplicating Lines]]
  - [[#whole-line-or-region][Whole Line Or Region]]
  - [[#beginning-of-line-text-then-line][Beginning Of Line Text Then Line]]
  - [[#switch-windows-via-letters][Switch Windows Via Letters]]
  - [[#swap-windows][Swap Windows]]
  - [[#sudo-editing][Sudo Editing]]
  - [[#place-buffer-as-fullframe][Place Buffer As Fullframe]]
- [[#general-settings][General Settings]]
  - [[#track-recent-files][Track Recent Files]]
  - [[#auto-update-file][Auto update file]]
  - [[#tramp][TRAMP]]
  - [[#save-history][Save History]]
  - [[#save-place][Save Place]]
  - [[#i-search][I-Search]]
  - [[#ibuffer][Ibuffer]]
  - [[#newline-behavior][Newline Behavior]]
  - [[#expand-region][Expand Region]]
  - [[#symbol-overlay][symbol-overlay]]
  - [[#kill-backwards][kill backwards]]
  - [[#define-backward-up-sexp][Define backward-up-sexp]]
  - [[#whitespaces][Whitespaces]]
  - [[#matching-and-highlighting-delimiters][Matching and Highlighting Delimiters]]
  - [[#improve-window-switching][Improve window switching]]
  - [[#jump-to-char][Jump to char]]
  - [[#dont-ask-to-kill-on-exit][Don't ask to kill on exit]]
- [[#ui-stuff][UI Stuff]]
  - [[#general][General]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#gui-frames][GUI Frames]]
  - [[#padding][Padding]]
- [[#minibuffer--completion-framework][Minibuffer / Completion Framework]]
  - [[#minbuffer][Minbuffer]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#edit-search-results-directly][Edit Search Results Directly]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#protogg][Protogg]]
  - [[#corfu][Corfu]]
  - [[#cape---completion-at-point-extensions][cape - Completion At Point Extensions]]
  - [[#spelling][Spelling]]
- [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#general-configure][General Configure]]
  - [[#extra-org-packages][Extra org packages]]
  - [[#org-appear][Org Appear]]
  - [[#org-file-locations][Org File Locations]]
  - [[#capturing][Capturing]]
  - [[#dynamic-re-align-tags][Dynamic Re-align tags]]
  - [[#pretty-symbol-replacement][Pretty Symbol Replacement]]
  - [[#clock-inout][Clock In/Out]]
  - [[#type-breaks][Type Breaks]]
  - [[#latex-fragments][Latex Fragments]]
  - [[#auto-save-pdf-toggle][Auto Save PDF Toggle]]
  - [[#writing-mode][Writing Mode]]
  - [[#refiling][Refiling]]
  - [[#to-do-settings][To Do Settings]]
  - [[#agenda-views][Agenda Views]]
  - [[#table-of-contents][Table of Contents]]
  - [[#automatically-tangle-on-save][Automatically "Tangle" on Save]]
  - [[#org-screenshot][Org Screenshot]]
  - [[#pdf-tools][PDF Tools]]
  - [[#markdown][Markdown]]
  - [[#org-roam][Org Roam]]
  - [[#google-calendar][Google Calendar]]
- [[#code-languages--file-modes][Code Languages & File Modes]]
  - [[#general-1][General]]
  - [[#go][Go]]
  - [[#rust][Rust]]
  - [[#toml][TOML]]
  - [[#python][Python]]
  - [[#csv][CSV]]
  - [[#yaml][YAML]]
  - [[#docker][Docker]]
  - [[#terraform][Terraform]]
  - [[#yuck][Yuck]]
- [[#fancy-bloat][Fancy Bloat]]
  - [[#mu4e---mail][Mu4e - Mail]]
  - [[#voice-to-text][Voice to Text]]
  - [[#gpt][GPT]]
  - [[#codeium][Codeium]]
  - [[#cus][cus]]
  - [[#hold-web-tabs][HOLD Web Tabs]]
  - [[#typing-practice][Typing Practice]]
  - [[#google-this][Google This]]
- [[#runtime-performance][Runtime Performance]]
  - [[#minibuffer-turn-off-gc-for-large-lists-and-commands][Minibuffer turn off GC for large lists and commands]]
- [[#inspiration][Inspiration]]

* Package Manager
  
Dropped straight.el because vc provides the one feature I was needing. That is source pulling packages.  ~use-package~  and ~vc-use-package~ are now built-in as well. 

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(defun load-all-environment-variables ()
    "Load all environment variables from the user's shell."
    (let ((shell-env (shell-command-to-string "env")))
      (dolist (var (split-string shell-env "\n"))
        (when (string-match "\\([^=]+\\)=\\(.*\\)" var)
          (let ((name (match-string 1 var))
                (value (match-string 2 var)))
            (setenv name value))))))
(load-all-environment-variables)
(eval-when-compile
  (require 'package)
  (require 'use-package))
(setq package-native-compile t
      async-bytecomp-package-mode t
      package-quickstart t
      package-install-upgrade-built-in t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq use-package-always-ensure t
      use-package-expand-minimally t
      use-package-compute-statistics t) ;; don't worry this takes like zero time
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)
(setq custom-file (no-littering-expand-etc-file-name "custom.el"))
(load custom-file 'noerror 'nomessage)
;; set this after no-littering
(add-hook 'package-upgrade-all-hook
          (lambda ()
            (package-quickstart-refresh)))
#+end_src

** Startup Time
   
#+begin_src elisp :exports results 
(emacs-init-time)  
#+end_src

#+RESULTS:
: 0.353360 seconds

** Breakdown

#+NAME: package-report-buffer :exports results 
#+begin_src elisp 
(use-package-report)
(with-current-buffer "*use-package statistics*" (buffer-string))
#+end_src

#+RESULTS: package-report-buffer :exports results 
#+begin_example
consult                   Configured    06:37:30.413574         0.02
savehist                  Configured    06:37:28.945848         0.01
minibuffer                Configured    06:37:28.958261         0.01
which-key                 Configured    06:37:28.950825         0.01
no-littering              Configured    06:37:28.927317         0.00
move-dup                  Initialized   06:37:28.927578         0.00
fullframe                 Configured    06:37:28.935026         0.00
doom-themes               Configured    06:37:28.954814         0.00
whole-line-or-region      Configured    06:37:28.933114         0.00
marginalia                Configured    06:37:28.959584         0.00
autorevert                Initialized   06:37:28.942587         0.00
orderless                 Configured    06:37:29.109848         0.00
windswap                  Configured    06:37:37.622593         0.00
protogg                   Configured    06:37:30.372769         0.00
multi-vterm               Initialized   06:37:29.099079         0.00
org-roam                  Initialized   06:37:29.098281         0.00
docker                    Initialized   06:37:29.103432         0.00
winner                    Initialized   06:37:28.952896         0.00
embark                    Initialized   06:37:28.960513         0.00
multiple-cursors          Initialized   06:37:28.950885         0.00
cape                      Declared      06:37:28.961350         0.00
corfu                     Initialized   06:37:29.109834         0.00
magit                     Initialized   06:37:29.098891         0.00
org-gcal                  Initialized   06:37:32.015842         0.00
org-agenda                Configured    06:37:32.015764         0.00
anzu                      Initialized   06:37:28.947653         0.00
eglot                     Initialized   06:37:29.098694         0.00
consult-dir               Initialized   06:37:30.395178         0.00
dired-ranger              Initialized   06:37:30.457361         0.00
conda                     Initialized   06:37:29.103239         0.00
browse-at-remote          Initialized   06:37:29.098786         0.00
gptel                     Initialized   06:37:29.103721         0.00
yasnippet                 Configured    06:37:29.303183         0.00
tab-line                  Initialized   06:37:29.099330         0.00
ibuffer-project           Initialized   06:37:28.947764         0.00
dired-single              Initialized   06:37:30.457340         0.00
default-text-scale        Initialized   06:37:28.954984         0.00
python                    Configured    06:37:29.103120         0.00
expand-region             Initialized   06:37:28.947861         0.00
go-tag                    Initialized   06:37:29.102865         0.00
page-break-lines          Configured    06:37:36.699302         0.00
flyspell                  Configured    06:37:30.893849         0.00
switch-window             Initialized   06:37:28.933184         0.00
go-fill-struct            Initialized   06:37:29.102923         0.00
go-ts-mode                Initialized   06:37:29.102798         0.00
dired-hide-dotfiles       Initialized   06:37:28.962009         0.00
go-gen-test               Initialized   06:37:29.102975         0.00
symbol-overlay            Configured    06:37:30.921262         0.00
recentf                   Configured    06:37:30.412873         0.00
whisper                   Initialized   06:37:29.103660         0.00
flyspell-correct          Initialized   06:37:30.893872         0.00
doom-modeline             Configured    06:37:29.159455         0.00
whitespace-cleanup-mode   Configured    06:37:30.918195         0.00
jupyter                   Configured    06:37:36.697366         0.00
google-this               Initialized   06:37:29.103799         0.00
markdown-mode             Initialized   06:37:29.098198         0.00
flycheck                  Configured    06:37:30.885001         0.00
dired                     Configured    06:37:30.457331         0.00
org-fragtog               Configured    06:37:31.961224         0.00
paren                     Configured    06:37:28.952802         0.00
visual-fill-column        Configured    06:37:31.948383         0.00
git-gutter                Configured    06:37:30.866798         0.00
mu4e                      Initialized   06:37:29.103630         0.00
org                       Configured    06:37:29.098100         0.00
org-bullets               Configured    06:37:31.964897         0.00
ispell                    Configured    06:37:30.893701         0.00
rainbow-mode              Configured    06:37:30.873593         0.00
pdf-tools                 Initialized   06:37:29.098163         0.00
docker-compose-mode       Initialized   06:37:29.103501         0.00
org-pretty-table          Configured    06:37:31.958540         0.00
yuck-mode                 Initialized   06:37:29.103568         0.00
toc-org                   Configured    06:37:31.940635         0.00
rust-ts-mode              Initialized   06:37:29.103026         0.00
display-line-numbers      Configured    06:37:30.924091         0.00
sudo-edit                 Initialized   06:37:28.933259         0.00
vertico                   Configured    06:37:29.108825         0.00
rainbow-delimiters        Configured    06:37:30.905995         0.00
all-the-icons-completion  Initialized   06:37:28.959628         0.00
treesit-auto              Initialized   06:37:29.098607         0.00
flycheck-golangci-lint    Initialized   06:37:29.102835         0.00
terraform-mode            Initialized   06:37:29.103527         0.00
yaml-ts-mode              Initialized   06:37:29.103326         0.00
csv-mode                  Initialized   06:37:29.103297         0.00
global-prettify-symbols-mode Initialized   06:37:28.954883         0.00
toml-ts-mode              Initialized   06:37:29.103081         0.00
wgrep                     Initialized   06:37:28.959688         0.00
tramp                     Initialized   06:37:28.942622         0.00
all-the-icons-dired       Initialized   06:37:28.961933         0.00
dockerfile-mode           Initialized   06:37:29.103476         0.00
org-appear                Configured    06:37:31.966361         0.00
dired-collapse            Initialized   06:37:28.961957         0.00
diredfl                   Initialized   06:37:28.961981         0.00
org-attach-screenshot     Initialized   06:37:29.098131         0.00
embark-consult            Initialized   06:37:28.960644         0.00
org-contrib               Initialized   06:37:28.962260         0.00
flycheck-popup-tip        Configured    06:37:32.064725         0.00
speed-type                Initialized   06:37:29.103776         0.00
define-word               Initialized   06:37:28.961560         0.00
kind-icon                 Declared      06:37:28.961189         0.00
yasnippet-snippets        Configured    06:37:29.303213         0.00
consult-flycheck          Initialized   06:37:30.884994         0.00
org-roam-ui               Declared      06:37:29.098479         0.00
magit-todos               Declared      06:37:29.098995         0.00
flycheck-rust             Declared      06:37:29.103057         0.00
consult-eglot             Declared      06:37:29.098720         0.00
forge                     Declared      06:37:29.098968         0.00
yasnippet-capf            Declared      06:37:28.961455         0.00
corfu-terminal            Declared      06:37:28.961157         0.00
corfu-candidate-overlay   Declared      06:37:28.961139         0.00
embark-vc                 Declared      06:37:28.960663         0.00
type-break                Declared      06:37:29.097350         0.00
#+end_example
   
* Editing Utilities

  General editing configurations.
  
  Packages I had at one point or another for UI.
  - [[https://github.com/abo-abo/avy][avy]]

** Meow - Modal Editing

#+begin_src emacs
(use-package meow
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak-dh)
    (meow-motion-overwrite-define-key
     ;; Use e to move up, n to move down.
     ;; Since special modes usually use n to move down, we only overwrite e here.
     '("e" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("?" . meow-cheatsheet)
     ;; To execute the originally e in MOTION state, use SPC e.
     '("e" . "H-e")
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("/" . meow-visit)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("e" . meow-prev)
     '("E" . meow-prev-expand)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-right)
     '("I" . meow-right-expand)
     '("j" . meow-join)
     '("k" . meow-kill)
     '("l" . meow-line)
     '("L" . meow-goto-line)
     '("m" . meow-mark-word)
     '("M" . meow-mark-symbol)
     '("n" . meow-next)
     '("N" . meow-next-expand)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("s" . meow-insert)
     '("S" . meow-open-above)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-search)
     '("w" . meow-next-word)
     '("W" . meow-next-symbol)
     '("x" . meow-delete)
     '("X" . meow-backward-delete)
     '("y" . meow-save)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode 1))
#+end_src   
   
** File Handler Functions
*** Handier way to add modes to auto-mode-alist

#+begin_src emacs-lisp
(defun add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))
#+end_src


This Emacs Lisp block defines a function called =add-auto-mode= which allows you to easily add entries to =auto-mode-alist=. This allows you to associate a major mode with a specific file pattern. The function takes a =MODE= argument and a variable number of =PATTERNS= arguments, and it adds each pattern-mode pair to =auto-mode-alist=.

*** Delete the current file

#+begin_src emacs-lisp
(defun delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))
#+end_src

This Emacs Lisp config block defines a function called =delete-this-file=. It deletes the current file and kills the buffer associated with it. It first checks if there is a file being edited in the buffer. If not, it throws an error. Then, it prompts the user for confirmation to delete the file. If the user confirms, it proceeds to delete the file using =delete-file= and kills the buffer using =kill-this-buffer

*** Rename the current file
    
#+begin_src emacs-lisp
(defun rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))
#+end_src

This Emacs Lisp configuration block defines a function called =rename-this-file-and-buffer= which renames both the current buffer and the file it's visiting to a new name specified by the user. It takes user input for the new name using the =interactive= keyword, checks if the buffer is visiting a file, renames the file if it exists, updates the visited file name, and renames the buffer accordingly.

*** Toggle Mode Line

#+begin_src emacs-lisp
(defun toggle-mode-line ()
  "toggles the modeline on and off"
       (interactive)
       (setq mode-line-format
             (if (equal mode-line-format nil)
                 (default-value 'mode-line-format)))
       (redraw-display))
#+end_src


This Emacs Lisp block defines a function called "toggle-mode-line" that toggles the display of the mode line on and off. When called interactively, it checks if the mode line is currently visible by comparing it to nil. If it is visible, it sets the mode-line-format to the default value, effectively hiding the mode line. If it is not visible, it sets the mode-line-format to nil, showing the mode line. Finally, it redraws the display to reflect the changes.

** Mark without Activate

#+begin_src emacs-lisp
(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil))
(global-set-key (kbd "C-`") 'push-mark-no-activate)
#+end_src
   
** Xterm Integration In Terminals (Mouse)

#+begin_src emacs-lisp
  (global-set-key [mouse-4] (lambda () (interactive) (scroll-down 1)))
  (global-set-key [mouse-5] (lambda () (interactive) (scroll-up 1)))
  (autoload 'mwheel-install "mwheel")
  (defun sanityinc/console-frame-setup ()
    (xterm-mouse-mode 1) ; Mouse in a terminal (Use shift to paste with middle button)
    (mouse-wheel-mode 1))
  (add-hook 'after-make-console-frame-hooks 'sanityinc/console-frame-setup)
#+end_src

This Emacs Lisp config block sets up mouse scrolling and mouse support in the terminal. It binds the mouse scroll up and down events to scroll functions, autoloads the =mwheel= package, defines a frame setup function for the console, enables mouse mode in the terminal, and activates mouse wheel mode.

** Move & Duplicating Lines

   Shift lines up and down with M-up and M-down. When paredit is enabled,
   it will use those keybindings. For this reason, you might prefer to
   use M-S-up and M-S-down, which will work even in lisp modes.
   use M-S-up and M-S-down, which will work even in lisp modes.

#+begin_src emacs-lisp
(use-package move-dup
  :defer t
  :bind(("M-<up>" . move-dup-move-lines-up)
        ("M-<down>" . move-dup-move-lines-down)
        ("C-c d" . move-dup-duplicate-down)
        ("C-c u" . move-dup-duplicate-up)))
#+end_src

This configuration block uses the =use-package= macro to manage the =move-dup= package. It sets up several keybindings and enables =move-dup= globally after initialization with the =after-init= hook. The keybindings allow you to move lines up and down, duplicate lines up and down using different key combinations.

** Whole Line Or Region

Cut/copy the current line if no region is active.

#+begin_src emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :config (whole-line-or-region-global-mode t))
#+end_src

This Emacs Lisp code block configures the =whole-line-or-region= package, enabling global mode and binding the key combination "M-j" to the function =comment-dwim=.

** Beginning Of Line Text Then Line

#+begin_src emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+end_src
  
This Emacs Lisp configuration block defines a function called =smarter-move-beginning-of-line=. This function moves the cursor to the indentation of the beginning of the current line. If the cursor is already at the indentation, it moves to the actual beginning of the line. The function also accepts an argument =ARG= which, if non-nil or non-zero, moves the cursor forward =ARG - 1= lines before executing the main logic. 

This configuration also remaps =C-a= (the default keybinding for =move-beginning-of-line=) to the =smarter-move-beginning-of-line= function using the =global-set-key= function.

** Switch Windows Via Letters

#+begin_src emacs-lisp
(use-package switch-window
  :config
  (setq switch-window-shortcut-style 'alphabet
        switch-window-timeout nil)
  :bind
  ("C-x o" . switch-window))
#+end_src

This config block sets up the Emacs package "switch-window" by configuring its options and binding the key combination "C-x o" to activate it.

** Swap Windows

   - Switch buffer focus using control + arrow key.
   - Move buffer direction with control+shift+arrow key.
   
#+begin_src emacs-lisp
(use-package windswap
  :defer 4
  :config
  (windmove-default-keybindings 'control)
  (windswap-default-keybindings 'shift 'control))
#+end_src   

This Emacs Lisp code configures the =windswap= package, which provides functions to navigate and rearrange windows. It sets up keybindings for both =windmove= (to move between windows) and =windswap= (to swap windows) using the control and shift keys. This configuration is executed after Emacs initializes.

** Sudo Editing

   This is completely unnecessary since you could just tramp the same file really quick but using this package is a slightly nicer user experience.

#+begin_src emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+end_src

** Place Buffer As Fullframe

#+begin_src emacs-lisp
(use-package fullframe)
#+end_src

* General Settings

  Slowly organizing these.

#+begin_src emacs-lisp
(setq-default
 fill-column 120
 blink-cursor-interval 0.4
 buffers-menu-max-size 30
 case-fold-search t
 column-number-mode t
 ediff-split-window-function 'split-window-horizontally
 ediff-window-setup-function 'ediff-setup-windows-plain
 tab-width 4
 mouse-yank-at-point t
 save-interprogram-paste-before-kill t
 set-mark-command-repeat-pop t
 tooltip-delay .8
 ring-bell-function 'ignore)
(delete-selection-mode t)
(global-goto-address-mode t)
(add-hook 'after-init-hook 'transient-mark-mode) ;; standard highlighting
(setq browse-url-browser-function #'browse-url-firefox)
(setq use-dialog-box nil)
(global-set-key (kbd "C-c C-p") 'find-file-at-point)
#+end_src

** Track Recent Files

   When you perform =m-x b= you will see list of recent files. loaded with consult.

#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :hook ((package-upgrade-all . recentf-cleanup))
  :custom
  (bookmark-save-flag 1)
  (bookmark-default-file (expand-file-name "var/bookmarks.el" user-emacs-directory))
  (recentf-auto-cleanup 'never) ; Disable automatic cleanup at load time
  (recentf-max-saved-items 25))
;; save backup and auto save to system tmp 
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Auto update file

   When A file changes on disk update Emacs.
   
#+begin_src emacs-lisp
(use-package autorevert
  :config (global-auto-revert-mode 1)
  :delight auto-revert-mode)
#+end_src

** TRAMP

Tramp was acting slow this helps...maybe

#+begin_src emacs-lisp
(customize-set-variable 'tramp-default-method "ssh")
(with-eval-after-load 'tramp
  (setq tramp-verbose 0 ;; more performance if working correctly
		tramp-use-ssh-controlmaster-options nil) ;; use .ssh/config controlmaster settings
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (add-to-list 'tramp-connection-properties
             (list (regexp-quote "/ssh:ag-nehrbash:")
				   "remote-shell" "/usr/bin/bash"
                   "direct-async-process" t
				   "tramp-direct-async" t)))
(setq vc-handled-backends '(Git)) ;; only user git
#+end_src

** Save History

#+begin_src emacs-lisp
(use-package savehist
  :ensure nil
  :config
  (setq history-length 25)
  (savehist-mode 1))
#+end_src   

** Save Place

   Open files back up at same position.
   
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
   
** I-Search

Show number of matches while searching
   
#+begin_src emacs-lisp
(use-package anzu
  :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
         ([remap query-replace] . anzu-query-replace)
         ("C-M-w". isearch-yank-symbol))
  :custom
  (anzu-mode-lighter "")
  :config
  (defun sanityinc/isearch-exit-other-end ()
    "Exit isearch, but at the other end of the search string.
This is useful when followed by an immediate kill."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))
  (define-key isearch-mode-map [(control return)] 'sanityinc/isearch-exit-other-end)
  ;; Search back/forth for the symbol at point
  ;; See http://www.emacswiki.org/emacs/SearchAtPoint
  (defun isearch-yank-symbol ()
    "*Put symbol at current point into search string."
    (interactive)
    (let ((sym (thing-at-point 'symbol)))
      (if sym
          (progn
            (setq isearch-regexp t
                  isearch-string (concat "\\_<" (regexp-quote sym) "\\_>")
                  isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                  isearch-yank-flag t))
        (ding)))
    (isearch-search-and-update)))
#+end_src

** Ibuffer

   Might just get rid of ibuffer in favor of ~consult-project-buffer~ which is the main reason I used ibuffer.

#+begin_src emacs-lisp
(use-package ibuffer-project
  :bind ("C-x C-b" . ibuffer)
  :custom ((ibuffer-show-empty-filter-groups nil)
           (ibuffer-project-use-cache t))
  :config
  (defun ibuffer-set-up-preferred-filters ()    
               (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
               (unless (eq ibuffer-sorting-mode 'project-file-relative)
                 (ibuffer-do-sort-by-project-file-relative)))
  :hook (ibuffer . ibuffer-set-up-preferred-filters))
#+end_src

** Newline Behavior

#+begin_src emacs-lisp
(setq ad-redefinition-action 'accept)

(defun sanityinc/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-<return>") 'sanityinc/newline-at-end-of-line)

(use-package display-line-numbers
  :if (fboundp 'display-line-numbers-mode)
  :init
  (setq-default display-line-numbers-width 3)
  (setq-default display-line-numbers-type 'relative)
  :hook (prog-mode . display-line-numbers-mode))
#+end_src

** Expand Region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-C e" . er/expand-region)
         ("M-C o" . er/mark-outside-pairs)))
#+end_src

** symbol-overlay
 
#+begin_src emacs-lisp 
(use-package symbol-overlay
  :hook ((prog-mode html-mode yaml-mode conf-mode) . symbol-overlay-mode)
  :delight symbol-overlay-mode
  :config
  (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
  (define-key symbol-overlay-mode-map (kbd "M-I") 'symbol-overlay-remove-all)
  (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
  (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev))
#+end_src

** kill backwards

#+begin_src emacs-lisp
(defun kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos
         (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))

(global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)
#+end_src

** Define backward-up-sexp

#+begin_src emacs-lisp
(defun sanityinc/backward-up-sexp (arg)
  "Jump up to the start of the ARG'th enclosing sexp."
  (interactive "p")
  (let ((ppss (syntax-ppss)))
    (cond ((elt ppss 3)
           (goto-char (elt ppss 8))
           (sanityinc/backward-up-sexp (1- arg)))
          ((backward-up-list arg)))))
(global-set-key [remap backward-up-list] 'sanityinc/backward-up-sexp) ; C-M-u, C-M-up
#+end_src

*** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :delight which-key-mode
  :custom (which-key-idle-delay 1)
  :config (which-key-mode 1))
#+end_src

*** Multi Cursor

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (("C-<" . mc/mark-previous-like-this)
         ("C->" . mc/mark-next-like-this)
         ("C-+" . mc/mark-next-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ;; From active region to multiple cursors:
         ("C-c m r" . set-rectangular-region-anchor)
         ("C-c m c" . mc/edit-lines)
         ("C-c m e" . mc/edit-ends-of-lines)
         ("C-c m a" . mc/edit-beginnings-of-lines)))
#+end_src

** Whitespaces

   View and auto remove them.

#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :commands (whitespace-cleanup)
  :hook ((prog-mode text-mode conf-mode) . sanityinc/show-trailing-whitespace)
  :delight
  :config
  (push 'markdown-mode whitespace-cleanup-mode-ignore-modes)
  (defun sanityinc/show-trailing-whitespace ()
    "Enable display of trailing whitespace in this buffer."
    (setq-local show-trailing-whitespace t)
    (whitespace-cleanup-mode 1)))
#+end_src

** Matching and Highlighting Delimiters
   
   Was using much more complicated packages like paredit/smartparens but was not using there features.

#+begin_src emacs-lisp
(electric-pair-mode t)
(use-package paren ; highight matching paren
  :ensure nil
  :hook (prog-mode . show-paren-mode))
#+end_src

** Improve window switching

   Purcell's configuration.

#+begin_src emacs-lisp
(use-package winner
  :bind (("C-x 2" . split-window-func-with-other-buffer-vertically)
         ("C-x 3" . split-window-func-with-other-buffer-horizontally)
         ("C-x 1" . sanityinc/toggle-delete-other-windows)
         ("C-x |" . split-window-horizontally-instead)
         ("C-x _" . split-window-vertically-instead)
         ("<f7>" . sanityinc/split-window)
         ("C-c <down>" . sanityinc/toggle-current-window-dedication))
  :config
  (defun split-window-func-with-other-buffer-vertically ()
    "Split this window vertically and switch to the new window."
    (interactive)
    (split-window-vertically)
    (let ((target-window (next-window)))
      (set-window-buffer target-window (other-buffer))
      (select-window target-window)))

  (defun split-window-func-with-other-buffer-horizontally ()
    "Split this window horizontally and switch to the new window."
    (interactive)
    (split-window-horizontally)
    (let ((target-window (next-window)))
      (set-window-buffer target-window (other-buffer))
      (select-window target-window)))

  (defun sanityinc/toggle-delete-other-windows ()
    "Delete other windows in frame if any, or restore previous window config."
    (interactive)
    (if (and (bound-and-true-p winner-mode)
           (equal (selected-window) (next-window)))
        (winner-undo)
      (delete-other-windows)))

  (defun split-window-horizontally-instead ()
    "Kill any other windows and re-split such that the current window is on the top half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-horizontally)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (defun split-window-vertically-instead ()
    "Kill any other windows and re-split such that the current window is on the left half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-vertically)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (defun sanityinc/split-window()
    "Split the window to see the most recent buffer in the other window.
Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'sanityinc/split-window)
        (progn
          (jump-to-register :sanityinc/split-window)
          (setq this-command 'sanityinc/unsplit-window))
      (window-configuration-to-register :sanityinc/split-window)
      (switch-to-buffer-other-window nil)))

  (defun sanityinc/toggle-current-window-dedication ()
    "Toggle whether the current window is dedicated to its current buffer."
    (interactive)
    (let* ((window (selected-window))
           (was-dedicated (window-dedicated-p window)))
      (set-window-dedicated-p window (not was-dedicated))
      (message "Window %sdedicated to %s"
               (if was-dedicated "no longer " "")
               (buffer-name)))))
#+end_src

** Jump to char

#+begin_src emacs-lisp
(use-package avy
  :bind ("C-:" . avy-goto-char-timer))
#+end_src   
   
** Don't ask to kill on exit

     Mainly because of open terminals don't ask on killing Emacs to stop process. 

#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src

* UI Stuff

  Packages I had at one point or another for UI.
  - [[https://github.com/gonewest818/dimmer.el][Dimmer]]
  - [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
  - [[https://github.com/ema2159/centaur-tabs][Centaur tabs]]
  - Treemacs
    
** General

#+begin_src emacs-lisp
(set-display-table-slot standard-display-table 'truncation ?\s) ;; remove the $ on wrap lines.
(setq default-frame-alist '(;;(alpha-background . 90)
							(font . "Source Code Pro-10")
							(left-fringe . 10)
							(right-fringe . 10)
							(vertical-scroll-bars . nil)))


(pixel-scroll-precision-mode t)
(set-face-attribute 'header-line nil :height 100)
#+end_src

*** Page Break

    don't need it right away normally

#+begin_src emacs-lisp
(use-package page-break-lines
  :config (page-break-lines-mode))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-gruvbox t)
  (doom-themes-org-config)

  :custom ((doom-themes-enable-bold t)
           (doom-gruvbox-padded-modeline t)
           (doom-themes-enable-italic t)
           (custom-safe-themes t)))
(use-package rainbow-delimiters
  :hook ((prog-mode conf-mode) . rainbow-delimiters-mode))
(use-package global-prettify-symbols-mode
  :ensure nil
  :hook ((prog-mode text-mode) . global-prettify-symbols-mode))
#+end_src

** Modeline

 #+begin_src emacs-lisp
 (use-package doom-modeline
   :config (doom-modeline-mode)
   :init
   (line-number-mode -1)
   (column-number-mode -1)
   (setq mode-line-position nil)
   (setq mode-line-percent-position nil)
   :custom
   ((doom-modeline-project-detection 'project)
	(doom-modeline-vcs-max-length 30)
	(doom-modeline-hud t)
	(doom-modeline-unicode-fallback t)
	(doom-modeline-env-version t)
	(doom-modeline-buffer-encoding nil)
	(doom-modeline-workspace-name nil)
	(doom-modeline-buffer-file-name-style 'auto)
	(doom-modeline-height 27)
	(doom-modeline-buffer-state-icon t)
	(doom-modeline-icon t)))
   #+end_src
 
** GUI Frames

   UI Features that are related to the Emacs GUI.

*** Window Size
    
    Change global font size easily
    
	#+begin_src emacs-lisp
	(use-package default-text-scale
	  :bind (("C-M-=". default-text-scale-increase)
			 ("C-M--" . default-text-scale-decrease)))
	#+end_src

** Padding

   #+begin_src emacs-lisp
   (use-package spacious-padding
	 :config (spacious-padding-mode))  
   #+end_src

* Minibuffer / Completion Framework

  What make Emacs, Emacs.

** Minbuffer

#+begin_src emacs-lisp
(defun stealthily (fn &rest args)
    "Apply FN to ARGS while inhibiting modification hooks."
    (let ((inhibit-modification-hooks t))
      (apply fn args)))
(use-package minibuffer
  :ensure nil
  :bind
  (:map minibuffer-local-completion-map
        ("<backtab>" . minibuffer-force-complete))
  :custom
  (enable-recursive-minibuffers t)
  (minibuffer-eldef-shorten-default t)
  (resize-mini-windows t)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  :hook
  (completion-list-mode . force-truncate-lines)
  (minibuffer-setup . cursor-intangible-mode)
  :config  
  (minibuffer-depth-indicate-mode)
  (minibuffer-electric-default-mode)
  (advice-add 'minibuf-eldef-setup-minibuffer :around #'stealthily))
#+end_src

** Vertico 
  
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))
(use-package marginalia
  :init (marginalia-mode)
  :bind (:map minibuffer-local-map
			  ("M-a" . marginalia-cycle))
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
(use-package all-the-icons-completion
  :after marginalia
  :config (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** Orderless
   instead of fuzzy (flex) in emacs terms orderless is a very nice completion framework it's particularly good at finding matches at end of things faster. Copy some stuff from here https://github.com/oantolin/emacs-config/blob/d0ffbd9527e48bd88dc4c9937e4dc80f783d844e/init.el#L375C2-L396C72https://github.com/oantolin/emacs-config/blob/d0ffbd9527e48bd88dc4c9937e4dc80f783d844e/init.el#L375C2-L396C72

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (orderless-matching-styles 'orderless-regexp)
  (orderless-component-separator #'orderless-escapable-split-on-space)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  (completion-category-defaults nil)
  (completion-styles '(orderless flex))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Edit Search Results Directly

 wgrep lets you edit  directly (good with embark export).

#+begin_src emacs-lisp
(use-package wgrep
  :commands (wgrep wgrep-change-to-wgrep-mode))
#+end_src

** Consult

   https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  :after vertico
  :defer t
  :bind (("C-r" . consult-ripgrep-symbol-at-point)
         ;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c C-m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x f" . consult-recent-file)
         ("C-c C-f" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g n" . consult-flymake)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("C-s" . (lambda () (interactive)(progn (push-mark-no-activate)(consult-line))))
         ("M-s ." . consult-line-thing-at-point)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)) 
  :init
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref xref-show-definitions-function #'consult-xref)
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  :custom
  (consult-narrow-key "<")
  (consult-preview-key '("M-," :debounce 0 any))
  :config
  (recentf-mode 1)
  ;; (setq consult-ripgrep-args (concat consult-ripgrep-args " --hidden"))
  (defalias 'consult-line-thing-at-point 'consult-line)
  (defalias 'consult-ripgrep-symbol-at-point 'consult-ripgrep)
  (consult-customize consult-ripgrep-symbol-at-point :initial (thing-at-point 'symbol))
  (consult-customize consult-line-thing-at-point :initial (thing-at-point 'symbol))
  (defvar consult--source-org
    (list :name     "Org"
          :category 'buffer
          :narrow   ?o
          :face     'consult-buffer
          :history  'buffer-name-history
          :state    #'consult--buffer-state
          :new
          (lambda (name)
            (with-current-buffer (get-buffer-create name)
              (insert "#+title: " name "\n\n")
              (org-mode)
              (consult--buffer-action (current-buffer))))
          :items
          (lambda ()
            (mapcar #'buffer-name
                    (seq-filter
                     (lambda (x)
                       (eq (buffer-local-value 'major-mode x) 'org-mode))
                     (buffer-list))))))
  (defvar consult--source-vterm
    (list :name     "Term"
          :category 'buffer
          :narrow   ?v
          :face     'consult-buffer
          :history  'buffer-name-history
          :state    #'consult--buffer-state
          :new
          (lambda (name)
            (vterm (concat "Term " name))
            (setq-local vterm-buffer-name-string nil))
          :items
          (lambda () (consult--buffer-query :sort 'visibility
                                            :as #'buffer-name
                                            :include '("Term\\ ")))))
  (defvar consult--source-star
    (list :name     "*Star-Buffers*"
          :category 'buffer
          :narrow   ?s
          :face     'consult-buffer
          :history  'buffer-name-history
          :state    #'consult--buffer-state
          :items
          (lambda () (consult--buffer-query :sort 'visibility
                                            :as #'buffer-name
                                            :include '("\\*." "^magit")))))
  ;; remove org and vterm buffers from buffer list
  (setq consult--source-buffer
        (plist-put
         consult--source-buffer :items
         (lambda () (consult--buffer-query
                     :sort 'visibility
                     :as #'buffer-name
                     :exclude '("\\*."           ; star buffers
								"\\#."
								"^type-break.el"
                                "Term\\ "        ; Term buffers
                                "^magit"         ; magit buffers
                                "[\\.]org$"))))) ; org files

  (setq consult--source-project-buffer
        (plist-put
         consult--source-project-buffer :items
         (lambda ()
           (consult--buffer-query
            :sort 'visibility
            :as #'buffer-name
            :exclude '("\\*."           ; star buffers
                       "Term\\ "        ; Term buffers
                       "^magit"          ; magit buffers
					   "^type-break.el"
					   "\#\!*"
                       )))))

  ;; reorder, mainly to move recent-file down and org
  (setq consult-buffer-sources
        '(consult--source-hidden-buffer
          consult--source-modified-buffer
          consult--source-buffer
          consult--source-org
          consult--source-vterm
          consult--source-bookmark
          consult--source-recent-file
          consult--source-file-register
          consult--source-project-buffer-hidden
          consult--source-project-recent-file-hidden
          consult--source-star))
  (setq consult-project-buffer-sources
        '(consult--source-project-buffer
          consult--source-vterm
          consult--source-project-recent-file
          consult--source-star)))
#+end_src

** Embark

   Do thing with thing at point in minbuffer or regular buffer. read their readme to actually understand. 
   
#+begin_src emacs-lisp
(use-package embark
  :bind (("M-." . embark-act)
         ("C-;" . embark-dwin)
         ("C-h B" . embark-bindings)
		 (:map minibuffer-mode-map
              ("M-e" . sn/edit-search-results))
         (:map embark-region-map
         ("w" . google-this)
         ("g" . gptel)))
  :init
  (defun sn/edit-search-results ()
    "Export results using `embark-export' and activate `wgrep'."
    (interactive)
    (progn
      (run-at-time 0 nil #'embark-export)
      (run-at-time 0 nil #'wgrep-change-to-wgrep-mode)))
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  (setq embark-action-indicator (lambda (map _target)
                                  (which-key--show-keymap "Embark" map nil nil 'no-paging)
                                  #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))

(use-package embark-consult
  :hook (embark-collect-mode . consult-preview-at-point-mode))
(use-package embark-vc
  :after embark)
#+end_src   

** Protogg

#+begin_src emacs-lisp
(use-package protogg
  :defer t
  :vc (:url "https://github.com/nehrbash/protogg.git"
               :branch "main" :rev :newest)
  :custom (protogg-minibuffer-toggle-key "M-g")
  :bind (([remap async-shell-command] . protogg-async-shell-command) ;; M-&
         ("C-c x" . protogg-compile)
         ([remap dired] . protogg-dired) ;; C-x d
         ("C-c e" . protogg-eshell)
         ("M-s d" . protogg-find-dired)
         ([remap find-file] . protogg-find-file) ;; C-x C-f
         ([remap list-buffers] . protogg-list-buffers) ;; type C-x C-b
         ([remap shell-command] . protogg-shell-command) ;; M-!
         ("C-c s" . protogg-shell)
         ([remap switch-to-buffer] . sn/consult-buffer)
         ("M-s i" . sn/imenu))
  :config
  (protogg-define 'consult-project-buffer 'consult-buffer sn/consult-buffer)
  (protogg-define 'consult-imenu-multi 'consult-imenu sn/imenu))
#+end_src

** Corfu

   Corfu is responsible for displaying the completion list. I use overlay for text buffers and dropdown list for programming. Testing this-command

#+begin_src emacs-lisp
(use-package corfu
  :hook (((prog-mode conf-mode yaml-mode) . (lambda ()
                       (setq-local corfu-auto t
                                   corfu-auto-delay 0
								   corfu-auto-prefix 1
								    completion-styles '(orderless-fast basic)
                                   corfu-popupinfo-delay 0.6))))
  :bind (:map corfu-map ("M-SPC" . corfu-insert-separator)
              ("TAB" . corfu-next)
              ([tab] . corfu-next)
              ("S-TAB" . corfu-previous)
              ([backtab] . corfu-previous))
  :custom
  (tab-always-indent 'complete)
  (corfu-quit-no-match 'separator)
  (corfu-auto-delay 0.8)
  (corfu-popupinfo-delay 0.2)
  (corfu-auto-prefix 2)
  :config
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)
  (defun orderless-fast-dispatch (word index total)
  (and (= index 0) (= total 1) (length< word 4)
       `(orderless-regexp . ,(concat "^" (regexp-quote word)))))
  (orderless-define-completion-style orderless-fast
	(orderless-style-dispatchers '(orderless-fast-dispatch))
	(orderless-matching-styles '(orderless-literal orderless-regexp)))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))
#+end_src

*** Overlay Candidate

#+begin_src emacs-lisp
(use-package corfu-candidate-overlay
  :after corfu
  :vc (corfu-candidate-overlay :url "https://code.bsdgeek.org/adam/corfu-candidate-overlay.git"
                               :branch "master" :rev :newest)
  :config (corfu-candidate-overlay-mode +1))
#+end_src    

*** More terminal support

#+begin_src emacs-lisp
(use-package corfu-terminal
  :after corfu
  :vc (:url "https://codeberg.org/akib/emacs-corfu-terminal.git"
            :branch "master" :rev :newest))
#+end_src

*** Icons for list

#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom ((kind-icon-default-face 'corfu-default)
		   (kind-icon-blend-background t)
		   (kind-icon-blend-frac 0.2))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src    

** cape - Completion At Point Extensions

   built-in =hippie-exp= and =dabbrev= is pretty good substitute if cape doesn't float your boat. it tries many diffrent functionzs.

#+begin_src emacs-lisp
(use-package cape
  :bind (("M-/" . completion-at-point) ;; overwrite dabbrev-completion binding with capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
		 ("C-z" . cape-codeium))
  :custom (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  :init
  (defalias 'cape-codeium (cape-capf-interactive #'codeium-completion-at-point))
  (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'yasnippet-capf)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src
    
*** Snippets
**** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :hook (emacs-startup . yas-global-mode)
  :bind (:map yas-minor-mode-map ("C-c s" . yas-insert-snippet))
  :config
  (add-to-list 'yas-snippet-dirs (expand-file-name "~/.emacs.d/etc/yasnippet/snippets"))
  (setq yas-verbosity 1)
  (setq yas-wrap-around-region t))
(use-package yasnippet-snippets
  :after yasnippet
  :hook (package-upgrade-all . (lambda () (yas-reload-all))))
(use-package yasnippet-capf
  :after cape
  :config
  (add-to-list 'completion-at-point-functions #'yasnippet-capf)) ;; Prefer the name of the snippet instead)
#+end_src

** Spelling

   usingz =flyspell-correct= as it uses =completing-read= by default so that it uses consult for it's completions frontend

   
#+begin_src emacs-lisp
(use-package ispell
  :defer t
  :config
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra" "--run-together")))
(use-package flyspell
  :defer t
  :hook (find-file . flyspell-on-for-buffer-type)
  :bind (:map flyspell-mode-map
               ("C-." . nil)  ;; Unbind the key
			   ("C-c w".  flyspell-toggle))
  :init
  (defun flyspell-on-for-buffer-type ()
    "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
    (interactive)
    (if (not (symbol-value flyspell-mode)) ; if not already on
		(progn
		  (if (derived-mode-p 'prog-mode)
			  (progn
				(message "Flyspell on (code)")
				(flyspell-prog-mode))
			(progn
			  (message "Flyspell on (text)")
			  (flyspell-mode 1))))))
 
  (defun flyspell-toggle ()
    "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
    (interactive)
    (if (symbol-value flyspell-mode)
		(progn ; flyspell is on, turn it off
	      (message "Flyspell off")
	      (flyspell-mode -1))
										; else - flyspell is off, turn it on
	  (flyspell-on-for-buffer-type)))
  :config
  (setq flyspell-issue-welcome-flag nil
        ;; Significantly speeds up flyspell, which would otherwise print
        ;; messages for every word when checking the entire buffer
        flyspell-issue-message-flag nil))
#+end_src
*** Nice UI for flyspell word
	
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("M-$" . flyspell-correct-wrapper)))  
#+end_src
	
	
*** Define word

#+begin_src emacs-lisp
(use-package define-word
  :after flyspell
  :bind (:map flyspell-mode-map ("M-^" . define-word-at-point)))
#+end_src

This config block sets up the =define-word= package and =flyspell-correct= package in Emacs. The =define-word= package provides a command for looking up definitions of words, while the =flyspell-correct= package adds a keybinding to correct spelling mistakes when using =flyspell= mode.
	 	 
* Dired

  Built in.

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump dired-omit-mode)
  :hook (dired-mode . my-dired-mode-hook)
  :delight dired-omit-mode
  :init
  (defun my-dired-mode-hook ()
    (dired-omit-mode 1)
    (setq mode-line-format nil)
    (hl-line-mode 1))
  :config
  (setq dired-omit-files "^\\.\\.?$")
  (setq-default dired-dwim-target t)
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-verbose nil)
  (setq dired-recursive-deletes 'top))
(use-package dired-single
  :after dired
  :bind (:map dired-mode-map
              ("b" . dired-single-up-directory) ;; alternative would be ("f" . dired-find-alternate-file)
              ("f" . dired-single-buffer)))
(use-package dired-ranger
  :after dired
  :bind (:map dired-mode-map
              ("w" . dired-ranger-copy)
              ("m" . dired-ranger-move)
              ("H" . dired-omit-mode)
              ("y" . dired-ranger-paste)))
(use-package all-the-icons
  :hook(package-upgrade-all . all-the-icons-install-fonts)
  :if (display-graphic-p))
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
(use-package dired-collapse
  :hook  (dired-mode . dired-collapse-mode))
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :bind (:map dired-mode-map
              ("." . dired-hide-dotfiles-mode)))
#+end_src

*** Consult Directories

#+begin_src emacs-lisp
(use-package consult-dir
  :after (consult)
  :bind (("C-x C-d" . consult-dir)
         (:map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
  :config
  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-ssh t)
  (defun consult-dir--tramp-docker-hosts ()
  "Get a list of hosts from docker."
  (when (require 'docker-tramp nil t)
    (let ((hosts)
          (docker-tramp-use-names t))
      (dolist (cand (docker-tramp--parse-running-containers))
        (let ((user (unless (string-empty-p (car cand))
                        (concat (car cand) "@")))
              (host (car (cdr cand))))
          (push (concat "/docker:" user host ":/") hosts)))
      hosts)))
(defvar consult-dir--source-tramp-docker
  `(:name     "Docker"
    :narrow   ?d
    :category file
    :face     consult-file
    :history  file-name-history
    :items    ,#'consult-dir--tramp-docker-hosts)
  "Docker candiadate source for `consult-dir'.")
(add-to-list 'consult-dir-sources 'consult-dir--source-tramp-docker t))
#+end_src

* Org Mode

  Text based writing.

** General Configure

#+begin_src emacs-lisp
(use-package org-contrib
  :defer t)
(use-package org
  :ensure org-contrib
  :bind (("C-c a" .  gtd)
         (:map org-mode-map
               ( "C-M-<up>" . org-up-element)))
  :config
  (require 'ox-extra)
  (setq org-latex-pdf-process '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -outdir=~/.cache/emacs %f"))
  (custom-set-faces
   '(org-document-title ((t (:height 3.2))))
   '(header-line ((t (:height 3 :weight bold))))
   '(org-level-1 ((t (:foreground "#fabd2f" :height 1.8))))
   '(org-level-2 ((t (:foreground "#83a598" :height 1.3))))
   '(org-level-3 ((t (:foreground "#d3869b" :height 1.1))))
   '(header-line ((t (:height 2)))))
  (defun gtd () (interactive) (org-agenda 'nil "g"))
  (setq org-adapt-indentation t
        org-auto-align-tags nil
        org-edit-src-content-indentation 0
        org-edit-timestamp-down-means-later t
        org-fast-tag-selection-single-key 'expert
        org-hide-emphasis-markers t
        org-image-actual-width nil
        org-insert-heading-respect-content t
        org-log-done 'time
        org-pretty-entities t
        org-return-follows-link  t
        org-special-ctrl-a/e t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-startup-folded t
        org-startup-with-inline-images t
		;; set this per file as it can make emacs hang.
		;; TODO(SN): use auctex-mode to fix this https://github.com/karthink/org-auctex
		org-startup-with-latex-preview nil
		org-support-shift-select t
        org-archive-location "%s_archive::* Archive"))
#+end_src

** Extra org packages

#+begin_src emacs-lisp
#+end_src
   
** Org Appear

Provides a way to toggle visibility of hidden elements such as emphasis markers, links, etc. by customising specific variables.

#+begin_src emacs-lisp
(use-package org-appear
  :vc (:url "https://github.com/awth13/org-appear.git"
                  :branch "master" :rev :newest)
  :hook (org-mode . org-appear-mode))
#+end_src

** Org File Locations

    Set registers to jump to certain files like type C-x r j e to open .emacs

#+begin_src emacs-lisp
(setq org-directory "~/doc")
(setq org-default-notes-file (concat org-directory "/notes.org"))
;; (require 'cl-lib)
(setq org-agenda-files
      (cl-remove-if-not #'file-exists-p
                        '("~/doc/inbox.org"
                          "~/doc/projects.org"
                          "~/doc/gcal.org"
                          "~/doc/repeater.org")))
#+End_src

** Capturing

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  (("C-c c" . org-capture))
  :config
  (setq org-capture-templates
        `(("t" "Tasks")
          ("tt" "Todo" entry (file "~/doc/inbox.org") 
           "* TODO %?\n%U\n%a\n" :clock-keep t)
          ("tt" "Todo" entry (file "~/doc/inbox.org") 
           "* TODO %?\n%U\n%a\n" :clock-keep t)
          ("tn" "Next" entry (file "~/doc/inbox.org")
           "* NEXT %?\nSCHEDULED: %t\n%U\n%a\n" :clock-keep t)
          ("ti" "Inprogress" entry (file "~/doc/inbox.org")
           "* NEXT %?\nSCHEDULED: %t\n%U\n%a\n" :clock-keep t :clock-in t)
          ("p" "New Project (clock-in)" entry (file "~/doc/projects.org")
           "* PROJECT %?\n" :clock-keep t :clock-in t)
          ("c" "Current task" checkitem (clock))
          ("r" "Roam")
          ("rt" "Go to today's daily note" entry (function (lambda ()
                                                             (org-roam-dailies-goto-today)
                                                             (org-capture-finalize))))
          ("rf" "Find or create an Org-roam node" entry (function (lambda ()
                                                                    (org-roam-node-find)
                                                                    (org-capture-finalize))))
          ("rv" "Open Roam UI in browser" entry (function (lambda ()
                                                            (org-roam-ui-open)
                                                            (org-capture-finalize)))))))
#+end_src

** Dynamic Re-align tags

#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (add-hook 'org-agenda-mode-hook
            (lambda ()   (setq mode-line-format nil)
              (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t)))
)
(with-eval-after-load 'org-mode
  (add-hook 'before-save-hook
            (lambda ()  (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t))))
#+end_src

** Pretty Symbol Replacement

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  (org-ellipsis " ⮟"))

(use-package org
  :hook (org-mode . (lambda ()
                      (set-face-attribute 'org-table nil :inherit 'fixed-pitch :font "Source Code Pro-10" :height 1.0)
                      (set-face-attribute 'org-block nil :inherit 'fixed-pitch :font "Source Code Pro-10" :height 1.0)
                      (setq-local prettify-symbols-alist
                            '(("[ ]" .  "☐")
                              ("[X]" . "☑" )
                              ("#+TITLE:" . "")
                              ("#+title: " . "")
                              ("#+begin_src" . "⮓")
                              ("#+end_src" . "⮒")))
                      (prettify-symbols-mode 1)))
  :config
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   `((dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (latex . t)
     (octave . t)
     (python . t)
     (,(if (locate-library "ob-sh") 'sh 'shell) . t)
     (sql . t)
     (sqlite . t))))
#+end_src

** Clock In/Out
   PDFs visited in Org-mode are opened in Evince (and other file extensions are handled according to the defaults)

#+begin_src emacs-lisp
(defvar org-clock-prefix-map (make-sparse-keymap)
  "A keymap for handy global access to org helpers, particularly clocking.")
(use-package org-clock
  :ensure nil
  :bind-keymap ("C-c o" . org-clock-prefix-map)
  :bind (:map org-clock-prefix-map
			  ("j" . org-clock-goto)
			  ("l" . org-clock-in-last)
			  ("i" . org-clock-in)
			  ("o" . org-clock-out))
  :custom
  (org-clock-in-resume t)
  (org-clock-persist t)
  ;; Save clock data and notes in the LOGBOOK drawer
  (org-clock-into-drawer t)
  ;; Save state changes in the LOGBOOK drawer
  (org-log-into-drawer t)
  ;; Removes clocked tasks with 0:00 duration
  (org-clock-out-remove-zero-time-clocks t)
  ;; dont' show clock in bar because we use system bar
  (org-clock-clocked-in-display nil)
  ;; Enable auto clock resolution for finding open clocks
  (org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (org-clock-report-include-clocking-task t)
  ;; use pretty things for the clocktable
  (org-pretty-entities t)
  (org-clock-persist 'history)
  (org-clock-persistence-insinuate))
#+end_src

** Type Breaks

#+begin_src emacs-lisp
(use-package type-break
  :hook ((org-clock-in-prepare . type-break-mode)
		 (after-init . type-break-mode))
  ;; Setting interval of that of a pomodoro session
  :custom
  (type-break-interval (* 25 60)) ;; 25 mins
  (type-break-good-rest-interval (* 5 60)) ;; 5 mins
  (type-break-good-break-interval (* 5 60)) ;; 5 mins
  (type-break-keystroke-threshold '(nil . 3000)) ;; 500 words is 3,000
  (type-break-demo-boring-stats t)
  (type-break-query-mode t)
  (type-break-query-function 'y-or-n-p)
  ;; This will stop the warnings before it's time to take a break
  (type-break-time-warning-intervals '())
  ;; (type-break-query-function '(lambda (a &rest b) t))
  (type-break-mode-line-message-mode nil)
  (type-break-demo-functions '(type-break-demo-boring))
  :config
  (defun org-clock-in-to-task-by-title (task-title)
  "Clock into an Org Agenda task by its title within a custom agenda command."
  (interactive "sEnter the title of the task: ")
  (save-window-excursion
    (org-agenda nil "t")
    (with-current-buffer "*Org Agenda(t)*"
      (goto-char (point-min))
      (if (search-forward task-title nil t)
          (progn
            (org-agenda-goto)
            (org-clock-in))
        (message "Task with title \"%s\" not found in the custom agenda view." task-title)))))
  (defun format-seconds-to-mm-ss (seconds)
	"Formats time to MM:SS."
	(let* ((minutes (floor (/ seconds 60)))
           (remaining-seconds (- seconds (* minutes 60))))
      (format "%02d:%02d" minutes remaining-seconds)))
  (defun type-break-json-data ()
	"Prints type break data used in eww bar."
	(let* ((total-break-time (type-break-time-difference nil type-break-time-next-break))
           (time-difference (type-break-time-difference nil type-break-time-next-break))
           (formatted-time (format-seconds-to-mm-ss time-difference))
           (percent (if type-break-mode
						(number-to-string (/ (* 100.0 time-difference)
											 type-break-interval))
                      "0"))
           (json-data `(:percent ,percent
								 :time ,formatted-time
								 :task ,(if (string-empty-p org-clock-heading)
											"No Active Task"
										  org-clock-heading)
								 :summary ,(concat (if (or (not org-clock-heading) (string= org-clock-heading ""))
													   "No Active Task"
													 org-clock-heading)
												   " " formatted-time)
								 :keystroke ,(or (cdr type-break-keystroke-threshold) "none")
								 :keystroke-count ,type-break-keystroke-count)))
      (json-encode json-data))))
#+end_src   

** Latex Fragments

#+begin_src emacs-lisp
(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

** Auto Save PDF Toggle

#+begin_src emacs-lisp
(defun toggle-org-pdf-export-on-save ()
  (interactive)
  (if (memq 'org-latex-export-to-pdf after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-latex-export-to-pdf t)
        (message "Disabled org pdf export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-latex-export-to-pdf nil t)
    (message "Enabled org export on save for current buffer...")))

(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+end_src

** Writing Mode

#+begin_src emacs-lisp
(define-minor-mode wr-mode
    "Set up a buffer for word editing.
 This enables or modifies a number of settings so that the
 experience of word processing is a little more like that of a
 typical word processor."
   :interactive t " Writing" nil
    (if wr-mode
        (progn
          (setq truncate-lines nil
                word-wrap t
                cursor-type 'bar)
          (when (eq major-mode 'org)
            (kill-local-variable 'buffer-face-mode-face))
          (buffer-face-mode 1)
          (setq-local blink-cursor-interval 0.8)
          (setq-local show-trailing-whitespace nil)
          (setq-local line-spacing 0.2)
          (setq-local electric-pair-mode nil)
          (ignore-errors (flyspell-mode 1))
          (visual-line-mode 1))
      (kill-local-variable 'truncate-lines)
      (kill-local-variable 'word-wrap)
      (kill-local-variable 'cursor-type)
      (kill-local-variable 'blink-cursor-interval)
      (kill-local-variable 'show-trailing-whitespace)
      (kill-local-variable 'line-spacing)
      (kill-local-variable 'electric-pair-mode)
      (buffer-face-mode -1)
      (flyspell-mode -1)
      (visual-line-mode -1)))
(use-package org-pretty-table
  :vc (:url "https://github.com/Fuco1/org-pretty-table.git"
                        :branch "master" :rev :newest)
  :hook (org-mode . org-pretty-table-mode))
(use-package org
  :bind ((:map org-mode-map
               ("C-c v" . wr-mode)))
  :hook ((org-mode . wr-mode)
         (org-mode . (lambda ()
            (setq-local buffer-face-mode-face '((:family "Google Sans" :weight bold )))
            (setq-local corfu-auto-delay 0.8)
            (buffer-face-mode)))))
#+end_src

*** Set Margins for org mode

#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (org-mode . dw/org-mode-visual-fill)
  :init
  (defun dw/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
  (visual-fill-column-mode 1)))
#+end_src

** Refiling

#+begin_src emacs-lisp
(setq org-refile-use-cache nil)
;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
(with-eval-after-load 'org-agenda
  (add-to-list 'org-agenda-after-show-hook 'org-show-entry))
(advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
;; Exclude DONE state tasks from refile targets
(defun sanityinc/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'sanityinc/verify-refile-target)
(defun sanityinc/org-refile-anywhere (&optional goto default-buffer rfloc msg)
  "A version of `org-refile' which allows refiling to any subtree."
  (interactive "P")
  (let ((org-refile-target-verify-function))
    (org-refile goto default-buffer rfloc msg)))
(defun sanityinc/org-agenda-refile-anywhere (&optional goto rfloc no-update)
  "A version of `org-agenda-refile' which allows refiling to any subtree."
  (interactive "P")
  (let ((org-refile-target-verify-function))
    (org-agenda-refile goto rfloc no-update)))

;; Targets start with the file name - allows creating level 1 tasks
;;(setq org-refile-use-outline-path (quote file))
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)

;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** To Do Settings

#+begin_src emacs-lisp
(use-package org
  :hook ((org-clock-in . (lambda () (org-todo "INPROGRESS")
						   (org-save-all-org-buffers)))
		 (org-clock-out . (lambda () 
							;; (unless (string-equal (org-get-todo-state) "DONE"))
							(org-todo "NEXT")
							(setq org-clock-heading "")
							(org-save-all-org-buffers))))
  :custom
  (org-todo-keywords
   (quote ((sequence "TODO(t)" "NEXT(n/!)" "INPROGRESS(i/!)" "|" "DONE(d!/!)")
           (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
           (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
   org-todo-repeat-to-state "NEXT")
  (org-todo-keyword-faces
   (quote (("NEXT" :inherit warning)
           ("PROJECT" :inherit font-lock-string-face)))))
#+end_src

** Agenda Views
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :hook (org-agenda-mode . hl-line-mode)
  :config
  (setq-default org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))

  ;; Set active-project-match
  (let ((active-project-match "-INBOX/PROJECT"))
    (setq org-stuck-projects `(,active-project-match ("NEXT" "INPROGRESS"))
          org-agenda-compact-blocks t
          org-agenda-sticky t
          org-agenda-start-on-weekday nil
          org-agenda-span 'day
          org-agenda-include-diary nil
          org-agenda-use-time-grid nil
          org-agenda-window-setup 'current-window
          org-agenda-sorting-strategy
          '((agenda habit-down time-up user-defined-up effort-up category-keep)
            (todo category-up effort-up)
            (tags category-up effort-up)
            (search category-up)))
      (setq org-agenda-custom-commands
        `(("g" "GTD"
           ((agenda "" nil)
            (tags "INBOX"
                  ((org-agenda-overriding-header "Inbox")
                   (org-tags-match-list-sublevels nil)
                   (org-agenda-skip-function
                    '(lambda ()
                       (org-agenda-skip-entry-if 'nottodo '("TODO" "DONE" "CANCELLED"))))))
            (stuck nil
                   ((org-agenda-overriding-header "Stuck Projects")
                    (org-agenda-tags-todo-honor-ignore-options t)
                    (org-tags-match-list-sublevels t)
                    (org-agenda-todo-ignore-scheduled 'future)))
            (tags-todo "-INBOX"
                       ((org-agenda-overriding-header "Next Actions")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-skip-function '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
                                (org-agenda-skip-entry-if 'nottodo '("NEXT" "INPROGRESS")))))
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
            (tags-todo ,active-project-match
                       ((org-agenda-overriding-header "Projects")
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "-INBOX-NEXT-REPEATER"
                       ((org-agenda-overriding-header "Orphaned Tasks")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-skip-function
                         '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
                                (org-agenda-skip-subtree-if 'nottodo '("TODO")))))
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "/WAITING"
                       ((org-agenda-overriding-header "Waiting")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "/DELEGATED"
                       ((org-agenda-overriding-header "Delegated")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-INBOX"
                       ((org-agenda-overriding-header "On Hold")
                        (org-agenda-skip-function
                         '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
                                (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-sorting-strategy '(category-keep))))))))))
#+end_src

** Table of Contents

   It's nice to have a table of contents section for long literate configuration files (like this one!) so I use =toc-org= to automatically update the TOC in any header with a property named =TOC=. Simply add a =:TOC:= tag to the header you want to be the table of contents. there are many TOC packages but I have found this one as it works in org files and rendered on GitLab.
   *Note:* This package can also be used for markdown but is not configured for it.

#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

** Automatically "Tangle" on Save

   Handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate programming.

#+begin_src emacs-lisp
(use-package org
 :config
 (defun sn/org-babel-tangle-dont-ask ()
   "Tangle Org file without asking for confirmation."
   (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle)))

 :hook
 (org-mode . (lambda ()
               (add-hook 'after-save-hook #'sn/org-babel-tangle-dont-ask
                         'run-at-end 'only-in-org-mode))))
#+end_src

** Org Screenshot

#+BEGIN_SRC emacs-lisp
(use-package org-attach-screenshot
  :commands (org-attach-screenshot)
  :config
  (setq org-attach-screenshot-command-line "/usr/share/sway/scripts/grimshot copy area"))
#+END_SRC

** PDF Tools

   Better PDF viewer, lots of cool stuff.
   make sure  pdf-info-epdfinfo-program in path

#+begin_src emacs-lisp
(use-package pdf-tools
  :hook ((pdf-view-mode . (lambda ()
							(pdf-view-midnight-minor-mode))))
  :custom (pdf-view-display-size 'fit-width)
  :config (pdf-loader-install))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode))
#+end_src

** Org Roam

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :delight(org-roam-mode)
  :config
    (org-roam-db-autosync-mode)
  :custom 
  (org-roam-directory "~/doc/Roam/")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  (org-roam-dailies-directory "Journal/")
  (setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
  :bind (("C-c n f"   . org-roam-node-find)
           ("C-c n d"   . org-roam-dailies-goto-date)
           ("C-c n n"   . org-roam-buffer-display-dedicated)
           ("C-c n c"   . org-roam-dailies-capture-today)
           ("C-c n C" . org-roam-dailies-capture-tomorrow)
           ("C-c n t"   . org-roam-dailies-goto-today)
           ("C-c n y"   . org-roam-dailies-goto-yesterday)
           ("C-c n r"   . org-roam-dailies-goto-tomorrow)
           ("C-c n G"   . org-roam-graph)
         :map org-mode-map
         (("C-c n i" . org-roam-node-insert))))
(use-package consult-org-roam
  :bind ("C-c n g" . org-roam-node-find)
  :after org-roam)
#+end_src

*** Org Roam UI

#+begin_src emacs-lisp
(use-package org-roam-ui
  :vc (:url "https://github.com/org-roam/org-roam-ui.git"
            :branch "main" :rev :newest)
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+end_src

** Google Calendar
   
   Add my Gmail. Has secrets so don't push.
   
#+begin_src emacs-lisp
;; (use-package org-gcal
;;   :after (org-agenda)
;;   :requires json
;;   :init
;;   (defun load-gcal-credentials ()
;;     "Load Google Calendar credentials from a JSON file."
;;     (let* ((json-file "~/.gcal-emacs")
;;            (json-data (json-read-file json-file)))
;;       (setq plstore-cache-passphrase-for-symmetric-encryption t)
;;       (setq org-gcal-client-id (cdr (assoc 'client-id json-data)))
;;       (setq org-gcal-client-secret (cdr (assoc 'client-secret json-data)))
;;       (setq org-gcal-fetch-file-alist `((,(cdr (assoc 'mail json-data)) .  "~/doc/gcal.org")))))
;;   (load-gcal-credentials)
;;   :bind (:map org-agenda-mode-map
;;          ("M-g" . org-gcal-sync)))
#+end_src

*** example ~/.gcal-emacs
 #+begin_src json
 {
   "client-id": "foo.apps.googleusercontent.com",
   "client-secret": "my-secret",
   "mail": "foo.bar@gmail.com"
 }
 #+end_src
 
* Code Languages & File Modes
** General

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hl-line-mode) ;; hilight line
#+end_src

*** Indent bars

#+begin_src emacs-lisp
(use-package indent-bars
  :hook ((python-mode conf-mode yaml-mode) . indent-bars-mode)
  :vc (:url "https://github.com/jdtsmith/indent-bars.git"
            :branch "main" :rev :newest))  
#+end_src
	
*** HEX Colors

   Show hex colors while coding or editing themes.
   
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src

*** Tree sitter
   
   Enable syntax highlighting based on the tree-sitter. already installed
    
#+begin_src emacs-lisp
(use-package treesit-auto
  :init
  (setq treesit-font-lock-level 4)
  :hook ((package-upgrade-all . treesit-auto-install-all))
  :config (global-treesit-auto-mode))
#+end_src
    
*** Eglot

#+begin_src emacs-lisp
(use-package eglot
  :hook (((go-ts-mode rust-ts-mode) . eglot-ensure)
		 (eglot-managed-mode . (lambda ()
								 (eglot-format-buffer-on-save)
								 (eglot-inlay-hints-mode 1)
								 (setq-local
								  completion-at-point-functions
								  (list
								   (cape-super-capf
									#'eglot-completion-at-point
									#'yasnippet-capf
									#'cape-file))))))
  :bind (:map eglot-mode-map
			  ;; "C-h ."  eldoc-doc-buffer
			  ("C-c C-c" . project-compile)
			  ("C-c r" . eglot-rename)
			  ("C-c o" . eglot-code-action-organize-imports))
  :custom
  (eglot-autoshutdown t)
  (eglot-events-buffer-size 0)
  (eglot-sync-connect nil)
  :config
  (setq-default eglot-workspace-configuration
				'(:gopls
				  (:usePlaceholders t
				   :staticcheck t
				   :gofumpt t
				   :analyses
				   (:nilness t
					:shadow t
					:unusedparams t
					:unusedwrite t
					:unusedvariable t)
				   :hints
				   (:assignVariableTypes t
					:constantValues t
					:rangeVariableTypes t))))
  (fset #'jsonrpc--log-event #'ignore)
  :init
  (defun eglot-format-buffer-on-save ()
	(add-hook 'before-save-hook #'eglot-format-buffer -10 t))
  (defun project-find-go-module (dir)
	(when-let ((root (locate-dominating-file dir "go.mod")))
	  (cons 'go-module root)))
  (cl-defmethod project-root ((project (head go-module)))
	(cdr project))
  (add-hook 'project-find-functions #'project-find-go-module))
(use-package consult-eglot
  :bind(:map eglot-mode-map ("C-c f" . consult-eglot-symbols)))
#+end_src

*** WAITING Git 
	:LOGBOOK:
	- State "WAITING"    from              [2023-09-19 Tue 21:12] \\
	  git-gutter lags consult live preview and tramp processes in general
	:END:

   Show diff in fringe if local files only to minimize remote work. 

#+begin_src emacs-lisp
(use-package git-gutter
  :hook (eglot-server-initialized . (lambda (server) (run-at-time 1 nil (lambda() (git-gutter-mode)))))
  :custom (
		   (git-gutter:ask-p nil)
		   (git-gutter:update-interval 2)))

(use-package git-gutter-fringe
  :after  git-gutter
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

**** Magit

-   =project-switch-project= was added so that magit shows up as an action item.
	 
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-dispatch project-switch-project)
  :config
  (require 'magit-extras)
  (fullframe magit-status magit-mode-quit-window)
  (setq-default magit-diff-refine-hunk t)
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         (:map magit-status-mode-map
               ("C-M-<up>" . magit-section-up))))
(use-package forge
  :after magit)
(use-package magit-todos
  :after magit
  :hook(magit-mode . magit-todos-mode))
#+end_src

**** Open in browser

#+begin_src emacs-lisp
(use-package browse-at-remote
  :bind (("C-c g g" . browse-at-remote)
		 ("C-c g k" . browse-at-remote-kill)))

#+end_src	 
*** Better Terminal

#+begin_src emacs-lisp
(use-package eat
  :hook ((eat-mode . (lambda ()
					   (setq-local
						left-margin-width 3
						right-margin-width 3
						cursor-type 'bar)
					   (toggle-mode-line)
					   (face-remap-add-relative
						'default
						:foreground (doom-color 'fg-alt)
						:background (doom-color 'base1))
					   (face-remap-add-relative
						'fringe
						:foreground (doom-color 'fg-alt)
						:background (doom-color 'base1)))))
  :custom ((eat-kill-buffer-on-exit t)
		   (eat-enable-yank-to-terminal t))
  :bind (("M-t" . eat-project-other)
		 (("M-t" . eat-other-window))))
#+end_src	
*** Compile Helpers 

#+begin_src emacs-lisp
(setq-default compilation-scroll-output t)
(defvar sanityinc/last-compilation-buffer nil
  "The last buffer in which compilation took place.")

(with-eval-after-load 'compile
  (defun sanityinc/save-compilation-buffer (&rest _)
    "Save the compilation buffer to find it later."
    (setq sanityinc/last-compilation-buffer next-error-last-buffer))
  (advice-add 'compilation-start :after 'sanityinc/save-compilation-buffer)

  (defun sanityinc/find-prev-compilation (orig &optional edit-command)
    "Find the previous compilation buffer, if present, and recompile there."
    (if (and (null edit-command)
             (not (derived-mode-p 'compilation-mode))
             sanityinc/last-compilation-buffer
             (buffer-live-p (get-buffer sanityinc/last-compilation-buffer)))
        (with-current-buffer sanityinc/last-compilation-buffer
          (funcall orig edit-command))
      (funcall orig edit-command)))
  (advice-add 'recompile :around 'sanityinc/find-prev-compilation))

(global-set-key [f6] 'recompile)

(defun sanityinc/shell-command-in-view-mode (start end command &optional output-buffer replace &rest other-args)
  "Put \"*Shell Command Output*\" buffers into view-mode."
  (unless (or output-buffer replace)
    (with-current-buffer "*Shell Command Output*"
      (view-mode 1))))
(advice-add 'shell-command-on-region :after 'sanityinc/shell-command-in-view-mode)

(with-eval-after-load 'compile
  (defun sanityinc/colourise-compilation-buffer ()
    (when (eq major-mode 'compilation-mode)
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  (add-hook 'compilation-filter-hook 'sanityinc/colourise-compilation-buffer))
#+end_src
*** static checking

#+begin_src emacs-lisp
(use-package flymake
 :diminish
 :hook (prog-mode . flymake-mode)
 :custom
 ((flymake-fringe-indicator-position 'right-fringe)
  (flymake-show-diagnostics-at-end-of-line 'short)
  (flymake-no-changes-timeout nil))
 :config (setq elisp-flymake-byte-compile-load-path
               (append elisp-flymake-byte-compile-load-path load-path)))
#+end_src	
	
** Go

   Don't forget to install golsp =go get golang.org/x/tools/gopls@latest=
   other tools

- gomodifytags
- goplay



#+begin_src emacs-lisp
(use-package go-ts-mode
  :mode "\\.go\\'"
  :ensure-system-package
  ((staticcheck . "go install honnef.co/go/tools/cmd/staticcheck@latest")
   (gofumpt . "go install mvdan.cc/gofumpt@latest")
   (gopls . "go install golang.org/x/tools/gopls@latest"))
  :hook (go-ts-mode . (lambda ()
						(setq-local compile-command "go build -v && go test -v -cover && go vet"
									go-ts-mode-indent-offset 4))))
(use-package go-tag
  :ensure-system-package (gomodifytags . "go install github.com/fatih/gomodifytags@latest")
  :bind (:map go-ts-mode-map ("C-c C-t" . go-tag-add)))
(use-package go-fill-struct
  :ensure-system-package (fillstruct . "go install github.com/davidrjenni/reftools/cmd/fillstruct@latest")
  :bind (:map go-ts-mode-map ("C-c C-f" . go-fill-struct)))
(use-package go-impl
  :ensure-system-package (impl . "go install github.com/josharian/impl@latest")
  :bind (:map go-ts-mode-map ("C-c C-i" . go-impl)))
(use-package go-gen-test
  :ensure-system-package (gotests . "go install github.com/cweill/gotests/gotests@latest")
  :bind (:map go-ts-mode-map ("C-c C-g" . go-gen-test-dwim)))
#+end_src

** Rust

Copy paste form here https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/.

#+begin_src emacs-lisp
(use-package rust-ts-mode
  :hook (rust-ts-mode . (lambda ()
						  (setq-local compile-command "cargo build")))
  :mode ("\\.rs\\'" . rust-ts-mode))
#+end_src

** TOML

#+begin_src emacs-lisp 
(use-package toml-ts-mode
  :hook (toml-ts-mode . goto-address-prog-mode))  
#+end_src

** Python

   install server pip install -U jedi-language-server

#+begin_src emacs
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
(use-package conda
  :after python
  :commands (conda-env-list conda-env-activate)
  :config
  ;; The location of your anaconda home will be guessed from a list of common
  ;; possibilities, starting with `conda-anaconda-home''s default value (which
  ;; will consult a ANACONDA_HOME envvar, if it exists).
  ;;
  ;; If none of these work for you, `conda-anaconda-home' must be set
  ;; explicitly. Afterwards, run M-x `conda-env-activate' to switch between
  ;; environments
  (or (cl-loop for dir in (list conda-anaconda-home
                                "~/.anaconda"
                                "~/.miniconda"
                                "~/.miniconda3"
                                "~/.miniforge3"
                                "~/anaconda3"
                                "~/miniconda3"
                                "~/miniforge3"
                                "~/opt/miniconda3"
                                "/usr/bin/anaconda3"
                                "/usr/local/anaconda3"
                                "/usr/local/miniconda3"
                                "/usr/local/Caskroom/miniconda/base"
                                "~/.conda")
               if (file-directory-p dir)
               return (setq conda-anaconda-home (expand-file-name dir)
                            conda-env-home-directory (expand-file-name dir)))
      (message "Cannot find Anaconda installation"))

  ;; integration with term/eshell
  (conda-env-initialize-interactive-shells)

  (add-to-list 'global-mode-string
               '(conda-env-current-name (" conda:" conda-env-current-name " "))
               'append))
(use-package jupyter
  :defer 3
  :config
  (add-to-list 'org-babel-load-languages '(jupyter . t))
  (setq code-cells-convert-ipynb-style '(
	                                     ("pandoc" "--to" "ipynb" "--from" "org")
	                                     ("pandoc" "--to" "org" "--from" "ipynb")
	                                     org-mode)))
#+end_src

** CSV

#+begin_src emacs-lisp
(use-package csv-mode
  :mode ("\\.[Cc][Ss][Vv]\\'" . python-mode)
  :config
  (setq csv-separators '("," ";" "|" " " ", ")))
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-ts-mode
  :hook (yaml-ts-mode . goto-address-prog-mode))
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure-system-package
  ((docker . "paru -S docker")
   (docker-compose . "paru -S docker-compose")
   (devcontainer . "npm install -g @devcontainers/cli"))
  :bind ("C-c d" . docker)
  :config
  (fullframe docker-images tablist-quit)
  (fullframe docker-volumes tablist-quit)
  (fullframe docker-networks tablist-quit)
  (fullframe docker-containers tablist-quit))
(use-package dockerfile-mode
  :mode ("\\.dockerfile\\'" . dockerfile-mode))           
(use-package docker-compose-mode
  :mode ("\docker-compose.yml\\'" . docker-compose-mode))
#+end_src


*** My docker setup hook

#+begin_src emacs-lisp
(defvar devcontainer-setup-done nil
  "Flag to track whether the devcontainer setup has been performed.")

(defun devcontainer-setup ()
  "Prompt user to reopen in devcontainer if the current file path doesn't contain '/docker:'."
  (unless devcontainer-setup-done
    (if (y-or-n-p "Reopen in devcontainer? (y/n) ")
        (progn
          (setq devcontainer-setup-done t)
          (shell-command "devcontainer up --workspace-folder .")
          (find-file "/docker:dev-container:/workspace"))
      (message "Devcontainer setup canceled."))))
#+end_src	

** Terraform
   
#+begin_src emacs-lisp
(use-package terraform-mode
  :mode ("\\.dockerfile\\'" . dockerfile-mode))
#+end_src

** Yuck

   Yuck is the eww configuration language.

#+begin_src emacs-lisp
(use-package yuck-mode
  :mode ("\\.yuck\\'" . yuck-mode)
  :hook (yuck-mode . (lambda () (setq-local lisp-indent-offset 2))))
#+end_src

* Fancy Bloat
  
** Mu4e - Mail

#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :commands (mu4e)
  ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :init
  (setq smtpmail-smtp-server "smtp.fastmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)
  :custom
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (mu4e-update-interval (* 10 60))
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-maildir "~/Mail")

  (mu4e-drafts-folder "/[Gmail]/Drafts")
  (mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (mu4e-refile-folder "/[Gmail]/All Mail")
  (mu4e-trash-folder  "/[Gmail]/Trash")

  :config


  (setq mu4e-maildir-shortcuts
      '(("/Inbox"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)
        ("/[Gmail]/Drafts"    . ?d)
        ("/[Gmail]/All Mail"  . ?a))))
#+end_src

** Voice to Text

   Speech-to-Text interface for Emacs using OpenAI’s whisper speech recognition model. For the inference engine it uses the awesome C/C++ port whisper.cpp that can run on consumer grade CPU (without requiring a high end GPU). 

#+begin_src emacs-lisp 
(use-package whisper
  :vc (:url "https://github.com/natrys/whisper.el"
            :branch "master" :rev :newest)
  :bind ("C-h w" . whisper-run)
  :config
  (setq whisper-install-directory "~/.cache/"
        whisper-model "base"
        whisper-language "en"
        whisper-translate nil))
#+end_src
   
** GPT
   
   This section contains an Emacs Lisp function that reads a text file containing an OpenAI key and a configuration for the GPT Emacs package. The package is installed using the =use-package= macro and configured to use the =gpt-3.5-turbo= model with Emacs' =org-mode= as the default mode for text editing. The =gptel= package is also bound to the =<f5>= and =C-<f5>= keys for quick access to the GPT language generation functionality.
   
#+begin_src emacs-lisp
(use-package gptel
  :bind (("<f5>" . gptel)
         ("C-<f5>" . gptel-menu))
  :custom
  (gptel-model "gpt-4")
  (gptel-default-mode 'org-mode))
#+end_src

** Codeium

#+begin_src emacs-lisp
;; we recommend using use-package to organize your init.el
(use-package codeium
    ;; if you use straight
    ;; otherwise, make sure that the codeium.el file is on load-path
    :vc (:url "https://github.com/Exafunction/codeium.el.git"
               :branch "main" :rev :newest)
	:hook (emacs-startup .  (lambda () (run-with-timer 0.1 nil #'codeium-init)))
 
    ;; :defer t ;; lazy loading, if you want
	:custom
	(codeium-log-buffer nil)
    :config
    (setq use-dialog-box nil) ;; do not use popup boxes

    ;; get codeium status in the modeline
    (setq codeium-mode-line-enable
        (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
    (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
    ;; alternatively for a more extensive mode-line
    ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
    (setq codeium-api-enabled
        (lambda (api)
            (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
    ;; you can also set a config for a single buffer like this:
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local codeium/editor_options/tab_size 4)))

    ;; You can overwrite all the codeium configs!
    ;; for example, we recommend limiting the string sent to codeium for better performance
    (defun my-codeium/document/text ()
        (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
    ;; if you change the text, you should also change the cursor_offset
    ;; warning: this is measured by UTF-8 encoded bytes
    (defun my-codeium/document/cursor_offset ()
        (codeium-utf8-byte-length
            (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
    (setq codeium/document/text 'my-codeium/document/text)
    (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))

#+end_src

** cus

#+begin_src emacs-lisp
(use-package cus-dir
  :vc (:url "https://gitlab.com/mauroaranda/cus-dir.git"
            :branch "master" :rev :newest)
  :bind ("C-x p d" . project-customize-dirlocals);; overwrite project-find-dir 
  :config
  (defun project-customize-dirlocals ()
	"Customize directory local variables for the current project.
If not in a project, prompt for the project root."
	(interactive)
	(let ((project (project-current t)))
      (if project
          (let ((default-directory (project-root project)))
			(customize-dirlocals))))))
#+end_src
   
** HOLD Web Tabs

   Needs better firefox support.
   
#+begin_src emacs
(use-package ibrowse
  :bind ("<f8>" . ibrowse-tab-select))  
#+end_src

** Typing Practice
  
  Typing practice inside Emacs.  
  
#+begin_src emacs-lisp
(use-package speed-type :commands speed-type-top-x
  :defer t)
#+end_src

** Google This
   
   dwin like google thing.

#+begin_src emacs-lisp
(use-package google-this
  :bind ("M-s w" . google-this))
#+end_src   

* Runtime Performance

#+begin_src emacs-lisp
(use-package gcmh
  :vc (:url "https://github.com/emacsmirror/gcmh.git"
               :branch "master" :rev :newest)
  :hook (after-init . gcmh-mode))
#+end_src
  
** Minibuffer turn off GC for large lists and commands 

#+begin_src emacs-lisp
(defun doom-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))
(defun doom-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time 1 nil (lambda () (setq gc-cons-threshold 16777216)))) ; 16mb
(add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)
#+end_src

* Inspiration
  
  [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] has a good list of packages and themes to check out.

Other dotfiles repos and blog posts for inspiration:

- [[https://github.com/purcell/emacs.d][Purcell's Reasonable Emacs config]]
- [[https://github.com/howardabrams/dot-files][Howard Abrams' dotfiles]]
- [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][UncleDave's Emacs config]]
- [[https://github.com/dakrone/dakrone-dotfiles][dakrone's dotfiles]]
- [[https://github.com/jinnovation/dotemacs][jinnovation dotemacs]]
- [[https://writequit.org/org/][writequit's config]]

And of course [[https://systemcrafters.cc/][System Crafters]] !

