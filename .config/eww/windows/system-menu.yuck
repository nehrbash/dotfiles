(defwidget system-menu []
  (box
    :class "system-menu-box"
    :space-evenly false
    :orientation "v"
    (box
      :class "top-row"
      :space-evenly false
      (label
		:class "profile"
		:style "background-image: url(\"${profile-image}\");")
      (label
        :class "time"
        :text "${time.hour}:${time.minute}")
      (box
        :class "date-box"
        :space-evenly false
        (label
          :class "date"
          :text {time.date})
        (label
          :class "day"
          :text {time.day})))
    (box
      :class "system-row"
      :space-evenly true
      (box
        :class "wifi-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon"
          (button
            :onclick "eww close system-menu ; eww close system-menu-closer ; scripts/record toggle"
            {record_state}))
        (label
          :text "Record"
          :xalign 0.5
          :limit-width 15))
      (box
        :class "bluetooth-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon"
          (button
            :onclick "eww close system-menu && eww close system-menu-closer && nwg-displays &"
            ""))
        (label
          :text "Moitors"
          :xalign 0.5))
      (box
        :class "airplane-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon"
          (button
            :class "airplane-button"
            :onclick "eww close system-menu && eww close system-menu-closer && scripts/inhibitor toggle &"
            {inhibitor}))
        (label
          :text "Inhibitor"
          :xalign 0.5
          :limit-width 16)))

    (box
      :class "sliders"
      :orientation "v"
	  :space-evenly false
      (box
        :class "volume-slider-box"
        :space-evenly false
        (button
          :class "volume-icon icon"
          :onclick "scripts/volume mute SINK"
          {volume.icon})
        (scale
          :class "volume-bar"
          :value {volume.percent}
          :tooltip "volume on ${volume.percent}%"
          :onchange "scripts/volume setvol SINK {}"))
      (box
        :class "volume-slider-box"
        :space-evenly false
        (button
          :class "volume-icon icon"
          :onclick "scripts/volume mute SOURCE"
          "")
        (scale
          :class "volume-bar"
          :value {volume.microphone}
          :tooltip "mic on ${volume.microphone}%"
          :onchange "scripts/volume setvol SOURCE {}"))
	  (revealer
		:transition "sliderdown"
		:reveal {battery.enabled}
		:duration "350ms"
		:class "apps-sidebar"
		(box
          :class "brightness-slider-box"
          :space-evenly false
          (button
			:class "brightness-slider-icon"
			{brightness.icon})
          (scale
			:class "brightness-slider"
			:value {brightness.level}
			:marks true
			:onchange "brightnessctl s {}%"))))
    (box
      :class "system-info-box"
      (box
        :class "sys-box"
        :space-evenly false
        :halign "start"
        (circular-progress
          :value "${EWW_CPU.avg}"
          :class "sys-cpu"
          :thickness 3
          (label
            :text ""
            :class "sys-icon-cpu icon"))
        (box
          :orientation "v"
          :vexpand false
          (label
            :text "cpu"
            :halign "start"
            :class "sys-text-cpu")
          (label
            :text "${round(EWW_CPU.avg,2)}%"
            :halign "start"
            :class "sys-text-sub")
          (label
            :text "${EWW_CPU.cores[0].freq} MHz"
            :halign "start"
            :class "sys-text-sub")))

      ; memory
      (box
        :class "sys-box"
        :space-evenly false
        :halign "end"
        (circular-progress
          :value {memory.percentage}
          :class "sys-mem"
          :thickness 3
          (label
            :text ""
            :class "sys-icon-mem icon"))
        (box
          :orientation "v"
          (label
            :text "memory"
            :halign "start"
            :class "sys-text-mem")
          (label
            :text "${memory.used} | ${memory.total}"
            :halign "start"
            :class "sys-text-sub"))))
    (centerbox
      :class "bottom-row"
      (label :halign "start" :class "upgared-text" :text " ${upgrades} Upgrades")
      (box
        :class "battery-box"
        :space-evenly false
        :halign "start")
      (box
        :space-evenly false
        :halign "end"
        (button
          :halign "end"
          :onclick "nwg-look &"
          :style "margin-right: 5px;"
          "")
        (power)))))

;; windows
(defwindow system-menu
  :stacking "fg" 
  :geometry (geometry
    :y 10
    :x 10
    :width "0%"
    :height "0%"
    :anchor "right top")
  (system-menu))

(defwidget closer [window]
  (eventbox :onclick "eww close ${window} && eww close ${window}-closer"))

(defwindow system-menu-closer
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "system-menu"))
