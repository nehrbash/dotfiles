(defvar IMAGE "images/profile.png")
(defvar greeting "Hey!")
(defpoll username :interval "48h"  "whoami")

(defpoll pkgs :interval "5h" "pacman -Qq | wc -l")
(defpoll pkgs_up :interval "5h" "checkupdates | wc -l")

(defpoll battery :interval "15s" "scripts/battery --bat")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll cpu :interval "17s" "scripts/cpu")


(defpoll volume_percent :interval "6s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent :interval "6s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness :interval "6s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")


(defwidget profile []
			(box :class "bg_alt" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :class "profile_picture" :halign "center" :style "background-image: url('${IMAGE});")
				(label :class "profile_greeting" :halign "center" :wrap "true" :limit-width 25 :text username)))
                

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "sys_bat_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 16
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_cpu_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
      (circular-progress :value cpu
                :class "sys_cpu"
                :thickness 16
            (label :text ""
                :class "sys_icon_cpu"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 16
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0)))))


;;  system
(defwidget stats []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(box :orientation "h" :spacing 30 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "volume_bar" :orientation "v" :spacing 25 :space-evenly "false" :vexpand "false" :hexpand "false"
                       (scale :flipped "true" :orientation "v" :min 0 :max 101 :value volume_percent :active "false" :onchange "amixer -D pulse sset Master {}%" )
                            (label  :text "" :class "vol_icon"))
					(box :class "mic_bar" :orientation "v" :spacing 25 :space-evenly "false" :vexpand "false" :hexpand "false"
                            (scale :flipped "true" :orientation "v" :min 0 :max 101 :value mic_percent :active "false")
                            (label  :text "" :class "mic_icon"))
					(box :class "bright_bar" :onchange "brightnessctl set {}%" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
                            (scale :flipped "true" :orientation "v" :min 0 :max 101 :value brightness :active "false")
                            (label  :text "" :class "brg_icon"))
					(box :class "storage_bar" :orientation "v" :spacing 25 :space-evenly "false" :vexpand "false" :hexpand "false"
                        (scale :flipped "true" :orientation "v" :min 0 :max 101 :active "false" :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)})
                        (label  :text ""
                                :class "stor_icon")))))

(defwidget fetch_sys [] 
		(box :class "win" :halign "center" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false" :spacing 10
		(box :vexpand "false" :hexpand "false" :orientation "h" :space-evenly "false" :spacing 30
				(label :class "fetch_icon_1" :text "")
				(label :class "fetch_sep_1" :text "" :halign "center")
                (label :class "fetch_text_1" :text "Arch"))
		(box :vexpand "false" :hexpand "false" :orientation "h" :space-evenly "false" :spacing 30
				(label :class "fetch_icon_2" :text "")
				(label :class "fetch_sep" :text "" :valign "center")
                (label :class "fetch_text_2" :text pkgs))
        (box :vexpand "false" :hexpand "false" :orientation "h" :space-evenly "false" :spacing 30
				(label :class "fetch_icon_3" :text "")
				(label :class "fetch_sep" :text "" :valign "center")
                (label :class "fetch_text_3" :text pkgs_up))))

;;  Music
(defpoll song :interval "3s"  "~/.config/eww/leftbar/scripts/gettitle")
(defpoll song_artist :interval "1s"  "playerctl metadata --format '{{ artist }}' && ~/.config/eww/leftbar/scripts/getart")
(defpoll song_status :interval "1s"  "~/.config/eww/leftbar/scripts/spotifystatus")
(defpoll cover :interval "5s"  "~/.config/eww/leftbar/scripts/echoart")


(defwidget music []
		(box :class "msc_ctl_bg" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :class "msc_bg" :style "background-image: url('${cover}');")
            (box :class "msc_ctl_bg" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
                 (label :halign "start" :class "song_artist" :wrap "true" :limit-width 24 :text song_artist)
                 (label :halign "start" :class "song" :wrap "false" :text song)
				 (box :class "msc_btns" :orientation "h" :spacing 8 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
					  (button :class "song_btn_prev" :onclick "playerctl previous" "")
					  (button :class "song_btn_play" :onclick "playerctl play-pause" song_status)
					  (button :class "song_btn_next" :onclick "playerctl next" "")
					  (button :class "song_btn_loop" :onclick "playerctl shuffle toggle" "")))))

;; Weather
(defpoll weather-icon :interval "20m" "cat /tmp/sway/weather/weather-icon")
(defpoll temperature :interval "20m" "cat /tmp/sway/weather/weather-degree")
(defpoll weather-hex :interval "20m" "cat /tmp/sway/weather/weather-hex")
(defpoll weather-quote :interval "20m" "~/.config/eww/leftbar/scripts/getwethquote")
(defpoll weather-quote2 :interval "20m" "~/.config/eww/leftbar/scripts/getwethquote2")
(defpoll weather-stat :interval "20m" "cat /tmp/sway/weather/weather-stat")
(defpoll weather-stat-side :interval "20m" "~/.config/eww/leftbar/scripts/weather-trimmer")

(defpoll forecast-0-icon :interval "20m" "cat /tmp/sway/weather/forecast-0-icon")
(defpoll forecast-0-state :interval "20m" "cat /tmp/sway/weather/forecast-0-state")
(defpoll forecast-0-date :interval "20m" "cat /tmp/sway/weather/forecast-0-date")
(defpoll forecast-0-min :interval "20m" "cat /tmp/sway/weather/forecast-0-min")
(defpoll forecast-0-max :interval "20m" "cat /tmp/sway/weather/forecast-0-max")

(defpoll forecast-1-icon :interval "20m" "cat /tmp/sway/weather/forecast-1-icon")
(defpoll forecast-1-state :interval "20m" "cat /tmp/sway/weather/forecast-1-state")
(defpoll forecast-1-date :interval "20m" "cat /tmp/sway/weather/forecast-1-date")
(defpoll forecast-1-min :interval "20m" "cat /tmp/sway/weather/forecast-1-min")
(defpoll forecast-1-max :interval "20m" "cat /tmp/sway/weather/forecast-1-max")


(defwidget weather-side []
           (box  :class "weather_bg" :orientation "v" :space-evenly "false" 
                (label :class "weather-icon-side" :style "color: ${weather-hex}" :text weather-icon)
                (box :class "weather-info-side" :orientation "v" :space-evenly "false"
                (label :class "temperature-side" :text "${temperature}  ")
                (label :class "weather-stat-side" :text "${weather-stat}"))))
(defwidget weather-quote []
           (box :class "weather-quote" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "true"
                (label :class "weather-quote-head" :text "${weather-quote}")
                (label :class "weather-quote-tail" :text "${weather-quote2}")))
                
(defwidget weather-forecast []
           (box :class "forecast_bg" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
                (box :class "weather-forecast-box" :orientation "v":space-evenly "false" 
                (label :class "weather-date" :text forecast-0-date)
                (box :class "weather-forecast-box" :orientation "h" :space-evenly "false"
                     (label :class "weather-icon" :text forecast-0-icon)
                     (box :class "weather-forecast-box" :orientation "v" :valign "center"
                     (label :class "weather-max" :text forecast-0-max) 
                     (label :class "weather-min" :text forecast-0-min)
                     (label :class "forcast-quote" :text forecast-0-state)))
                )
                (box :class "weather-forecast-box" :orientation "v":space-evenly "false"
                (label :class "weather-date" :text forecast-1-date)
                (box :class "weather-forecast-box" :orientation "h" :space-evenly "false"
                     (label :class "weather-icon" :text forecast-1-icon)
                     (box :class "weather-forecast-box" :orientation "v"
                     (label :class "weather-max" :text forecast-1-max) 
                     (label :class "weather-min" :text forecast-1-min)
                     (label :class "forcast-quote" :text forecast-1-state)))
                )


))                



;; pomodoro 25 min is 1500 sec
(defpoll pomo-percent :interval "15s" "./scripts/pomo_percent")
(defpoll pomo-time :interval "1s" "./scripts/pomo_time")
(defpoll pomo-task :interval "15s" "./scripts/pomo_task")

(defwidget pomodoro []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "pomo_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value pomo-percent
                :class "pomo"
                :thickness 16
            (label :halign "center" :valign "center"
                :class "pomo_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 45))
                (box :class "pomo_box" :orientation "v" :space-evenly "false" :hexpand "true" :vexpand "false"
                (label :class "pomo_time" :text pomo-time)
                (label :class "pomo_task" :text pomo-task)))))
                


(defwidget bg []
  (box :class "bg"))

(defwindow weather
           :monitor 0
           :geometry (geometry
                     :width "225px"
                     :height "300px"
                     :x "300px"
                     :y "260px")
           (weather-side))
           
(defwindow weathqu
           :monitor 0
           :geometry (geometry
                     :width "550px"
                     :height "100px"
                     :x "0px"
                     :y "560px")
           (weather-quote))
           
(defwindow weathfc
           :monitor 0
           :geometry (geometry
                     :width "550px"
                     :height "230px"
                     :x "0px"
                     :y "640px")
           (weather-forecast))           

(defwindow pomo
           :monitor 0
           :geometry (geometry
                     :width "540px"
                     :height "200px"
                     :x "5px"
                     :y "860px")
           (pomodoro))
           
(defwindow back
  :monitor 0
  :stacking "fg"
  :geometry (geometry :anchor "left center"
             :width "550px"
             :height "75%"
             :x "0px"
             :y "0px")
             (bg))
             

(defwindow pfp
  :monitor 0
  :geometry (geometry 
             :width "265px"
             :height "300px"
             :x "20px"
             :y "260px")
  (profile))


(defwindow time
  :monitor 0
  :geometry (geometry 
             :width "218px"
             :height "90px"
             :x "285px"
             :y "355px")
  (time))


(defwindow day_dot
  :monitor 0
  :geometry (geometry 
             :width "250px"
             :height "50px"
             :x "270px"
             :y "485px")
  (day))


(defwindow sys_usg
  :monitor 0
  :geometry (geometry 
             :width "200px"
             :height "520px"
             :x "310px"
             :y "1270px")
  (system))



(defwindow status
  :monitor 0
  :geometry (geometry 
             :width "280px"
             :height "200px"
             :x "20px"
             :y "1500px")
  (stats))

(defwindow fetch :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry 
             :width "276px"
             :height "148px"
             :x "280px"
             :y "1104px")
  (fetch_sys))


(defwindow song :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry 
             :width "280px"
             :height "320px"
             :x "10px"
             :y "1100px")
  (music))
