(defwidget weather-day [min max icon desc day month]
  (box
    :class "weather-forecast-box"
    :orientation "v"
    :space-evenly "false"
    :valign "end"
    (box
      :orientation "h"
      :space-evenly "false"
      (label
        :class "weather-icon"
        :text {icon})
      (box
        :orientation "v"
        :space-evenly "false"
        :vexpand "true"
        (box
          :orientation "h"
          :space-evenly "false"
          :valign "start"
          :halign "start"
          (label
            :class "weather-date"
            :text "${month}")
          (label
            :class "weather-sep"
            :text "/")
          (label
            :class "weather-date"
            :text "${day}"))
        (box
          :orientation "v"
          :space-evenly "false"
          :valign "end"
          :vexpand "true"
          (label
            :class "weather-max"
            :text "${max}°F")
          (label
            :class "weather-min"
            :text "${min}°F"))))
    (label
      :class "weather-state"
      :max 20
      :text {desc})))
(defwidget weather-hour [time temp icon]
  (box
    :orientation "v"
    :space-evenly "false"
    :valign "end"
    (label
      :class "weather-time"
      :text {time})
    (label
      :class "weather-icon"
      :text {icon})
    (label
      :class "weather-max"
      :text "${temp}°F")))


(defwidget weather-forecast []
  (box
    :class "ct_box"
    :orientation "v"
    :space-evenly "false"
    :vexpand "false"
    :hexpand "true"
    (centerbox
      :orientation "h"
      :class "title-bar"
      (label
        :halign "start"
        :style "padding-left: 15px;"
        :class "weather-label"
        :text "${weather.currentIcon} ${weather.currentTemp}°F")
      (label
        :text "Feels Like ${weather.feelTemp}°F"
        :class "weather-label")
      (label
        :halign "end"
        :class "weather-label"
        :text {weather.location}
        :style "padding-right: 15px;"))
    (box
      :style "padding-top: 15px;"
      (for h in {weather.hours}
        (weather-hour
          :time {h.time}
          :temp {h.temp}
          :icon {h.icon} )))))


(defwidget weather-moon []
  (box
    :orientation "v"
    :class "ct_box"
    :space-evenly "false"
    :vexpand "false"
    (label
      :class "moon-label"
      :text {weather.moonLabel})
    (box
      :orientation "h"
      :space-evenly "true"
      :hexpand "false"
      :vexpand "false"
      :halign "center"
      (for m in {weather.moons}
        (label
          :class "weather-moon ${m.class}"
          :text "${m.value}")))))
